#!/opt/applic/epd/bin/python
"""
randomDisperse.py
Original: May 11 2011 In Kim
"""

# Python Modules
import sys
import os
import string
import random
import time
import getopt

# Custom Modules
import bgf
import nutils as nu

# Globals
version = '110511'

def randomDisperse(bgf_file, size, number, out_file, silent=False):
	"""
def randomDisperse():
	Create a randomly distributed cubic with full of the monomers

Function Parameters:
	bgf_file	A string which contains a monomer information in a BGF format. 
	size
	number
	out_file
	"""

	# initialize

	# open bgf
	if not silent: print("reading monomer..")
	cubicBGF = bgf.BgfFile()
	#for atom in cubicBGF.a:
	#	cubicBGF.delAtom(cubicBGF.a2i[atom.aNo])

	# repeat up to number:
	if not silent: print("generating cubic box..")
	for i in xrange(number):

        # create three random numbers
		x1 = random.uniform(0, size)
		y1 = random.uniform(0, size)
		z1 = random.uniform(0, size)
		
        # move the monomer
		addBGF = bgf.BgfFile(bgf_file)
		headAtom = addBGF.a[0]
		#delta = (headAtom.x - x1, headAtom.y - y1, headAtom.z - z1)
		delta = (x1 - headAtom.x, y1 - headAtom.y, z1 - headAtom.z)
		bgf.moveBGF(addBGF, delta[0], delta[1], delta[2])

        # merge
		cubicBGF = cubicBGF.merge(addBGF, True)

	# make it periodic
	cubicBGF.BIOGRF = "200"
	cubicBGF.DESCRP = bgf_file[:-4]
	cubicBGF.REMARK.insert(0, "Cubic generated by " + os.path.basename(sys.argv[0]) + " by " + os.environ["USER"] + " on " + time.asctime(time.gmtime()))
	cubicBGF.FF = "FORCEFIELD DREIDING"
	cubicBGF.PERIOD = "111"
	cubicBGF.CRYSTX = [ size, size, size, 90.0, 90.0, 90.0 ]
	cubicBGF.AXES = "ZYX"
	cubicBGF.SGNAME = "P 1                  1    1\n"
	cubicBGF.CELLS = [-1, 1, -1, 1, -1, 1]

	# save
	if not silent: print("saving.. " + out_file)
	cubicBGF.saveBGF(out_file)

	### end of randomDisperse


if __name__ == '__main__':

	option = ""; args = ""; bgf_file = ""; size = 0.0; out_file = "";
	number = 0
	usage = """
Usage: randomDisperse.py -b "bgfFiles" -s size -n monomers -o output

Options are:
	-b	A series of BGF monomers in quotes("").
	-s	Size of the cubic. (DEFAULT 10.0 A)
	-n	Number of the monomers. (DEFAULT 100)
	-o	Output file. (DEFAULT suffix_output.log)
	"""

	if len(sys.argv) < 2:
		print(usage); sys.exit(0)

	options, args = getopt.getopt(sys.argv[1:], 'hb:s:n:o:', ['help','bgf=','size=','number=','output='])
	for option, value in options:
		if option in ('-h', '--help'):
			print usage; sys.exit(0)
		elif option in ('-b', '--bgf'):
			bgf_file = value
		elif option in ('-o', '--output'):
			out_file = value
		elif option in ('-s', '--size'):
			size = float(value)
		elif option in ('-n', '--number'):
			number = int(value)
		elif option in (''):
			print(usage); sys.exit(0)

	# default settings
	if not out_file: out_file = os.path.basename(bgf_file)[:-4] + "_cubic.bgf"
	if not size: size = 20.0
	if not number: number = 100

	randomDisperse(bgf_file, size, number, out_file, silent=False)


#!/home/noische/program/python27/bin/python

import sys, re, string, getopt, optparse, math, time, pprint 
from os import popen
import bgf
import bgftools
import numpy as np
import operator
import copy
import nutils as nu
import datatools
import dreiding
import pickle

import dump

option = ""; args = ""; bgf_file = ""; trj_file = ""; out_file = ""; 
usage = """
BGF_dipole.py -b bgf_file -t trj_file -f ff_file
"""
version = "130206"

#-----------------
# calculate dipole moments from the LAMMPS trajectory
# http://code.google.com/p/pdb-tools/source/browse/trunk/pdbTools/pdb_moment.py
# last update: 2013/02/06
#_________________
def get_line(trj_file):
	"""
	Open a lazy file stream. This is considered to increase a file reading speed.
	"""
	with open(trj_file) as file:
		for i in file:
			yield i


def dot(a, b):
	"""
	Calculate dot product of a and b
	"""
	try:
		na = len(a); nb = len(b)
	except:
		nu.die("List required for dot product calculation.")

	na = len(a); nb = len(b)

	temp = [a[i] * b[i] for i in range(na)]
	temp2 = 0;

	for i in temp:
		temp2 += i

	return temp2;


def dipole(bgf_file, trj_file, ff_file, out_file, silent=False):

	### init
	timestep = 0; l_timestep = []; line = []; n_header = 0;
	t1 = 0; t2 = 0; # clock
	vector = [0, 0, 1];	# the axis of interest. in the acetone-water case, z direction.
	atominfo = dict();	# atom data extracted from ff_file
	result = dict();
	set_residue = set();	# kind of residues in BGF file
	dict_residue = dict();	# stores residue numbers per each residue. RES1: [1, 2, ..], RES2: [6, 7, ..]


	### unit conversion for debye
	elementary_q = 1.602176487e-19 # elementary charge in C
	debye_conv = 3.33564e-30       # 1 Debye in C*m
	k = elementary_q*1e-10/debye_conv


	### open files
	myBGF = bgf.BgfFile(bgf_file)
	myTRJ = open(trj_file)
	myTRJ.seek(0)
	myOUT = open(out_file + ".dat", 'w')
	myOUT2 = open(out_file + ".angle.dat", 'w')
	myOUT3 = open(out_file + ".magnitude.dat", 'w')
	myOUT4 = open(out_file + ".system.dipole.dat", 'w')
	myRESULT = open(out_file + ".pickle", 'w')


	### read residues from bgf_file
	for i in myBGF.a:
		rname = string.strip(i.rName)
		set_residue.add(rname)
	temp = "";
	for i in set_residue:
		temp += i + " ";

	if not silent: print("Found " + str(len(set_residue) + " residues in BGF file: " + str(temp)))


	### bookkeep residue numbers for each residue
	molecules = bgftools.getMoleculeList(myBGF)


	### read mass from ff_file
	try:
		parse = ff_file.split(" ")
	except:
		nu.die("Error occurred when reading the force field file.. Check your " + str(ff_file))
	else:
		if not silent: print("Found " + str(len(parse)) + " Cerius2 Force Fields.")

	for i in parse:
		FF = dreiding.loadFF(i)
		temp_atominfo = dreiding.loadAtomTypes(FF)
		atominfo.update(temp_atominfo)


	### read trajectory file
	# how many steps to go?
	wc_trj_file = popen("grep TIMESTEP " + trj_file + " | wc -l ").read()
	n_timestep = int(wc_trj_file.split()[0]);
	print("The trajectory contains " + str(n_timestep) + " timesteps.")

	# Find header of the trajectory file
	while 1:
		templine = myTRJ.readline()
		line.append(templine.strip('\n').strip('ITEM: '))
		n_header += 1
		if "ITEM: ATOMS" in templine:
			break;

	# INITIAL trajectory information
	timestep = int(line[1])
	natoms = int(line[3])
	boxsize = [line[5].split(' ')[0], line[5].split(' ')[1], line[6].split(' ')[0], line[6].split(' ')[1], line[7].split(' ')[0], line[7].split(' ')[1]]
	boxsize = [float(i) for i in boxsize]
	keywords = line[8].strip('ATOMS ')

	# for every shot in the trajectory file update BGF and manipulate
	dumpatom = get_line(trj_file)
	processed_step = 0;

	t1 = t2 = 0; elapsed_time = 0;

	while 1:
		try:
			chunk = [next(dumpatom) for i in range(natoms+n_header)]
		except StopIteration:
			break;
	
		timestep = int(chunk[1])
		l_timestep.append(timestep)
		natoms = int(chunk[3])
		boxsize = [chunk[5].split(' ')[0], chunk[5].split(' ')[1], chunk[6].split(' ')[0], chunk[6].split(' ')[1], chunk[7].split(' ')[0], chunk[7].split(' ')[1]]; 
		boxsize = [float(i) for i in boxsize]; boxsize = [(boxsize[1] - boxsize[0]), (boxsize[3] - boxsize[2]), (boxsize[5] - boxsize[4])]
		keywords = chunk[8].split('ATOMS ')[1].strip('\n').split(' ')

		### Show progress
		t1 = time.time();
		remaining_time = elapsed_time * (n_timestep - processed_step)
		sys.stdout.write('\r' + "Reading timestep.. " + str(timestep) + " (Elapsed time for the previous step: " + "{0:4.1f}".format(elapsed_time) + " seconds, Remaining time: " + "{0:4.1f}".format(remaining_time) + " seconds = " + "{0:4.1f} minutes".format(remaining_time/60) + ")")
		sys.stdout.flush()

		processed_step += 1;

		### update myBGF with trajectory information ###
		natom_bgf = len(myBGF.a)	# number of atoms in BGF file
	
		if not natom_bgf == natoms:
			nu.die("Number of atoms in trajectory file does not match with BGF file.")
	
		mode = ""
		if 'xs' in keywords or 'ys' in keywords or 'zs' in keywords:
			mode = 'scaled'
		elif 'x' in keywords or 'y' in keywords or 'z' in keywords:
			mode = 'normal'
		elif 'xu' in keywords or 'yu' in keywords or 'zu' in keywords:
			mode = 'unwrapped'
	
		# actual coordinate
		coordinfo = chunk[9:]
	
		# assume that coordinfo is similar to ['id', 'type', 'xs', 'ys', 'zs', 'ix', 'iy', 'iz']
		for atomline in coordinfo:
			atomcoord = atomline.split(' ')
			atom = myBGF.getAtom(int(atomcoord[0]))
	
			if mode == 'scaled':
				atom.x = float(atomcoord[2]) * boxsize[0]
				atom.y = float(atomcoord[3]) * boxsize[1]
				atom.z = float(atomcoord[4]) * boxsize[2]
	
			elif mode == 'unwrapped':
				atom.x = float(atomcoord[2])
				atom.y = float(atomcoord[3])
				atom.z = float(atomcoord[4])
	
			elif mode == 'normal':
				try:
					ix_index = keywords.index('ix')
					iy_index = keywords.index('iy')
					iz_index = keywords.index('iz')
				except ValueError:
					nu.warn("No image information no the trajectory file. Will be treated as unwrapped.")
					atom.x = float(atomcoord[2])
					atom.y = float(atomcoord[3])
					atom.z = float(atomcoord[4])
				else:
					atom.x = (int(atomcoord[ix_index]) * boxsize[0]) + float(atomcoord[2]) 
					atom.y = (int(atomcoord[iy_index]) * boxsize[1]) + float(atomcoord[3]) 
					atom.z = (int(atomcoord[iz_index]) * boxsize[2]) + float(atomcoord[4]) 
	
			try:
				for i in range(0, 3):
					myBGF.CRYSTX[i] = boxsize[i]
			except:
				pass;
				#nu.warn("Crystal information error: is this file not periodic?")
				
		# apply periodic condition
		myBGF = bgftools.periodicMoleculeSort(myBGF, 0)

		### DONE for updating trj on BGF file

		### Now Dipole Moment Calculation

		# list of all molecules in BGF
		dipole_moments = dict();
		abs_dipole_moments = dict();
		angles = dict();
		n_atoms = dict();
		residues = [];
		output_dipole = str(timestep) + "\t";
		output_abs_dipole = str(timestep) + "\t";
		output_angle = str(timestep) + "\t";

		mu_system = [0, 0, 0];

		for molecule in molecules:
			n_atom = len(molecule)	# number of atoms in the molecule
			residue_no = myBGF.getAtom(molecule[0]).rNo;	# residue number of the molecule
			m = bgftools.getMass(myBGF, molecule, ff_file);	# molecule mass
			cm = [0, 0, 0];		# center of mass
			mu = [0, 0, 0];		# dipole moment
			coord = [0, 0, 0];	# atom x, y, z
			residues.append(residue_no)			# store residue numbers of molecules

			for aNo in molecule:
				atom = myBGF.getAtom(aNo)
				coord = [atom.x, atom.y, atom.z];

				# error if residue numbers are different
				if atom.rNo != residue_no:
					nu.die("Residue numbers in a same molecule are not consistent. Please check your BGF file.")

				# error if mass is unreadable
				ffType = string.strip(atom.ffType)
				try:
					aMass = atominfo[ffType]['MASS']
				except:
					nu.die("Cannot read the atom type " + str(atom.ffType) + " in the data file.")

				# calculate CM
				for index, i in enumerate(coord):
					cm[index] += i * aMass

			cm = [i / m for i in cm];	# center of mass

			# translate the molecule to CM
			for aNo in molecule:
				atom = myBGF.getAtom(aNo)
				atom.x -= cm[0]
				atom.y -= cm[1]
				atom.z -= cm[2]

			# calculate dipole moment sum(qi * di)
			mu_i = [];
			for aNo in molecule:
				atom = myBGF.getAtom(aNo)
				coord = [atom.x, atom.y, atom.z];
				mu_i.append([i * atom.charge * k for i in coord]);

			# sum up
			mu = [0, 0, 0];
			for i in mu_i:
				mu[0] += i[0]
				mu[1] += i[1]
				mu[2] += i[2]
				mu_system[0] += i[0]
				mu_system[1] += i[1]
				mu_system[2] += i[2]


			len_mu = math.sqrt(dot(mu, mu))
			len_vector = math.sqrt(dot(vector, vector))

			#if len_mu <= 0.0001 or len_vector <= 0.0001:
			#	angle = 0;
			#else:
			angle = math.acos( dot(mu, vector) / ( len_mu * len_vector ) )
			angle = rad2deg(angle)

			# results
			dipole_moments[residue_no] = mu;
			abs_dipole_moments[residue_no] = len_mu;
			angles[residue_no] = angle;
			n_atoms[residue_no] = n_atom;

		residues.sort()

		temp_dict = dict()
		temp_dict['MU'] = dipole_moments
		temp_dict['ABSMU'] = abs_dipole_moments
		temp_dict['ANGLES'] = angles
		temp_dict['NATOMS'] = n_atoms
		temp_dict['TOTALMU'] = mu_system

		### paperworks per residue
		
		# result: timestep - MU, ANGLES, NATOMS
		result[timestep] = temp_dict


		#myBGF.saveBGF(bgf_file[:-4] + "." + str(timestep) + ".trjupdated.bgf")
		### myBGF update complete! ###

		#myBGF2.saveBGF(bgf_file[:-4] + "." + str(timestep) + ".bgf")

		t2 = time.time()	# time mark
		elapsed_time = t2 - t1;

	### write-ups
	# headers
	firstkey = result.keys()[0]	# a set of results for a timestep

	output_dipole = "";
	output_abs_dipole = "";
	output_angle = "";
	output_system_dipole = "";

	for r in residues:
		output_dipole += str(result[firstkey]['NATOMS'][r]) + '\t';
		output_abs_dipole += str(result[firstkey]['NATOMS'][r]) + '\t';
		output_angle += str(result[firstkey]['NATOMS'][r]) + '\t';

	myOUT.write(output_dipole)
	myOUT2.write(output_angle)

	# results
	tkey = result.keys();
	tkey.sort()

	for t in tkey:
		output_dipole = str(t) + "\t";
		output_abs_dipole = str(t) + "\t";
		output_angle = str(t) + "\t";

		for r in residues:
			output_dipole += str(result[t]['MU'][r]) + '\t';
			output_abs_dipole += str(result[t]['ABSMU'][r]) + '\t';
			output_angle += str(result[t]['ANGLES'][r]) + '\t';

		output_dipole += "\n";
		output_abs_dipole += "\n";
		output_angle += "\n";
		output_system_dipole = str(result[t]['TOTALMU']) + '\n';
		
		myOUT.write(output_dipole)
		myOUT2.write(output_angle)
		myOUT3.write(output_abs_dipole)
		myOUT4.write(output_system_dipole)

	myOUT.close()
	myOUT2.close()
	myOUT3.close()
	myOUT4.close()

	myBGF.saveBGF('temp.bgf')

	# a pickle object
	pickle.dump(result, myRESULT)
	myRESULT.close()


	print('')
	return 1

	### end of function


def rad2deg(r):
	return 180*(r/math.pi)


if __name__ == "__main__":
	bgf_file = ""; trj_file = ""; ff_file = ""; out_file = "";

	options, args = getopt.getopt(sys.argv[1:], 'hb:t:f:o:', ['help', 'bgf=', 'trj=', 'ff=', 'out='])

	if len(sys.argv) < 2:
		print(usage)
		sys.exit(0)

	print "Requested options: " + str(options)

	for option, value in options:
	        if option in ('-h', '--help'):
	                print(usage)
			sys.exit(0)
	        elif option in ('-b', '--bgf'):
	                bgf_file = value
	        elif option in ('-t', '--trj'):
	                trj_file = value
	        elif option in ('-f', '--ff'):
	                ff_file = value
	        elif option in ('-o', '--out'):
	                out_file = value
	        elif option == NULL:
			print(usage)
			sys.exit(0)

	if out_file == "":
		out_file = bgf_file[:-4] + ".dipole";
	
	# main call
	dipole(bgf_file, trj_file, ff_file, out_file)

.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Graph 3"
.TH Graph 3 "2006-06-07" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
Chart::Graph \- Perl extension for a front\-end to gnuplot, XRT, and Xmgrace.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& # EXAMPLE: gnuplot
\& #make sure to include Chart::Graph
\& use Chart::Graph:Gnuplot qw(gnuplot);
.Ve
.PP
.Vb 3
\& gnuplot(\e%global_options, [\e%data_set_options, \e@matrix],
\&                           [\e%data_set_options, \e@x_column, \e@y_column],
\&                           [\e%data_set_options, < filename >], ... );
.Ve
.PP
.Vb 6
\& # EXAMPLE: Xmgrace
\& #make sure to include Chart::Graph
\& use Chart::Graph::Xmgrace qw(xmgrace);
\& xmgrace(\e%global_options, [\e%data_set_options, \e@matrix],
\&                           [\e%data_set_options, \e@x_column, \e@y_column],
\&                           [\e%data_set_options, < filename >], ... );
.Ve
.PP
.Vb 3
\& # EXAMPLE: xrt2d
\& #make sure to include Chart::Graph
\& use Chart::Graph::Xrt2d qw(xrt2d);
.Ve
.PP
.Vb 1
\& xrt2d(\e%options, \e@data_set);
.Ve
.PP
.Vb 5
\& #say for example we have a 3 by 4 matrix -> dataxy
\& xrt2d(\e%options,
\&       [[data11, data12, data13, data14],
\&       [data21, data22, data23, data24],
\&       [data31, data32, data33, data34]])
.Ve
.PP
.Vb 3
\& # EXAMPLE: xrt3d
\& #make sure to include Chart::Graph
\& use Chart::Graph::Xrt3d qw(xrt3d);
.Ve
.PP
.Vb 1
\& xrt3d(\e%options, \e@data_set);
.Ve
.PP
.Vb 5
\& #say for example we have a 3 by 4 matrix -> dataxy
\& xrt3d(\e%options,
\&       [[data11, data12, data13, data14],
\&       [data21, data22, data23, data24],
\&       [data31, data32, data33, data34]])
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\& use Chart::Graph;
.Ve
.PP
Graph.pm is a wrapper module that allows easy generation of graphs
within perl. Currently Graph.pm supports three graphing packages,
gnuplot, \s-1XRT\s0, and Xmgrace.  These software packages must be obtained
separately from this Perl module.  Information on each graphing
package and it's availability is provided in the documentation on that
module.  Gnuplot and Xmgrace are freely available software pages for
\&\s-1UNIX\s0 systems.  \s-1XRT\s0 is a commercial product.
.PP
Currently the xrt3d and xrt2d package is not being supported,
although it works. It is still in the development stage. Feel free
to give it a try though.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
Because Chart-Graph is a wrapper script, you need to install the
graphic package that you wish to use \fBbefore\fR attempting to install
Chart\-Graph.pm.  Unless the appropriate graphics software is
installed, the testing portions of the install will fail.
.PP
If you want to use the xrt2d/xrt3d package, you need to build the
respective \*(L"graph\*(R" binaries in the xrt2d/xrt3d directories.  Refer to
the \fI\s-1README\s0\fR files in the xrt2d and xrt3d directories for
instructions on creating the required binaries.
.PP
Chart\-Graph.pm use the standard Perl module installation procedure.  To
install Graph.pm on your system you need to run:
.PP
.Vb 4
\&         perl Makefile.PL
\&         make
\&         make test
\&         make install
.Ve
.PP
The standard Perl options apply. For example you can specify the
location of you Perl Installation by the option:
\&\f(CW\*(C`PREFIX=/home/your/private/dir\*(C'\fR.  Which results modifying the first
command as follows:
.PP
.Vb 1
\&         perl Makefile.PL PREFIX=/your/private/dir
.Ve
.PP
Running the Makefile.PL Perl script mades some additional preparation
before creating the the Makefile.  In particular, the script sets up
the testing routines for the various graphics modules.
.PP
.Vb 1
\&        Enter (space separated) graphing drivers to test: [gnuplot xrt3d xrt2d xmgrace]
.Ve
.PP
Enter the names of the graphical software packages that you have
installed.  The others will be ignored even if Chart-Graph will appear
to \*(L"test\*(R" them.  If you are using Xmgrace or \s-1XRT\s0 there are additional
options you will need to supply.  In order to permit Xmgrace to
perform its test without using the X server you should provide a path
to a X virtual frame buffer.
.PP
.Vb 1
\&        Enter path to X virtual frame buffer(Xvfb):
.Ve
.PP
Finally, If you are running \s-1XRT\s0, you need to provide that path to the
\&\s-1XRT\s0 binaries:
.PP
.Vb 1
\&        Enter path to xrt2d binary (built from xrt2d/):
.Ve
.PP
Note that running the tests will create image files that are placed in
the directory \fItest_results\fR.  These images are almost all identical
with the examples provided with the documentation and can be used to
check if there are subtile errors in your image creation software.
.SH "USAGE"
.IX Header "USAGE"
Chart::Graph attempts as much as possible to provide a uniform
interface to these different graphics packages.  Unfortunately, the
functionality of each program is sufficiently different that the
interface cannot be entirely uniform.
.Sh "\s-1GENERAL\s0 \s-1DIAGNOSTICS\s0 \s-1AND\s0 \s-1TOOLS\s0"
.IX Subsection "GENERAL DIAGNOSTICS AND TOOLS"
Currently Chart::Graph supports two levels of debug, \f(CW0\fR (no debug msgs)
and \f(CW1\fR(debug msgs). You need to set the \f(CW$Chart::Graph::debug\fR flag
accordingly. If you are having problems with Graph.pm set the debug
flag to \f(CW1\fR. Also Graph.pm will check \f(CW$ENV{TMPDIR}\fR for the temporary
file storage. If you do not specify, it will be set to \fI/tmp\fR
automatically. Temporary files can also be saved for further debugging
purposes by setting \f(CW$Chart::Graph::save_tmpfiles\fR flag accordingly, \f(CW0\fR
(no tmp files saved) or \f(CW1\fR (save tmp files specified in \f(CW\*(C`$ENV{TMPDIR)\*(C'\fR or
/tmp by default)
.PP
Note: Currently, \s-1XRT\s0 and Xmgrace use the local x server to draw it's
graphics by default. With \s-1XRT\s0, if you are having problems with color
or speed is an issue, set \f(CW$Chart::Graph::use_xvbf\fR to \f(CW1\fR to use the
virtual x frame buffer. With Xmgrace, you \s-1MUST\s0 set
\&\f(CW$Chart::Graph::use_xvbf\fR to \f(CW1\fR if you are not using a local x server.
.PP
All the documentation is also provided in \s-1HTML\s0 with the sample graphic
files for Graph.pm are located in the \fIdoc\fR directory.
.SH "CONTENT SUMMARY"
.IX Header "CONTENT SUMMARY"
.Vb 7
\& Graph.pm        - top level file of Chart::Graph
\& Graph/          - sub modules of Chart::Graph
\& Graph/Xmgrace/  - sub modules of Chart::Graph::Xmgrace
\& doc/            - documentation in HTML 
\& xrt2d/          - xrt2d wrapper executable code
\& xrt3d/          - xrt3d wrapper executable code
\& test_Graph.pl   - the test script used for debugging
.Ve
.SH "MORE INFO"
.IX Header "MORE INFO"
For more information on gnuplot, please see the gnuplot web page:
.PP
.Vb 1
\& http://www.gnuplot.org/
.Ve
.PP
For more information on Xmgrace, please see the Xmgrace web page:
.PP
.Vb 1
\& http://plasma-gate.weizmann.ac.il/Grace
.Ve
.PP
For more information on \s-1XRT\s0, please contact Sitraka (now Quest):
.PP
.Vb 1
\& http://www.quest.com/xrt_pds/
.Ve
.SH "CONTACT"
.IX Header "CONTACT"
Send email to graph\-dev@caida.org is you have problems, questions,
or comments. To subscribe to the mailing list send mail to
graph\-dev\-request@caida.org with a body of \*(L"subscribe your@email.com\*(R"
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\& CAIDA Perl development team (cpan@caida.org)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 2
\& gnuplot(1).
\& xmgrace(1).
.Ve

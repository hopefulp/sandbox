.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Graph::Xrt2d 3"
.TH Graph::Xrt2d 3 "2006-06-07" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
Chart::Graph::Xrt2d
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& #Include module
\& use Chart::Graph::Xrt2d qw(xrt2d);
.Ve
.PP
.Vb 7
\& # Function call
\& xrt2d(\e%options,
\&       [\e%data_options1, \e@data_set1],
\&       [\e%data_options2, \e@data_set2],
\&        .
\&        .
\&      );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is unmaintained, it worked with Sitraka's \s-1XRT\s0, and hasn't been
tested against newer versions.
.PP
Sitraka (now Quest) makes a number of graphics packages for \s-1UNIX\s0 systems.  \s-1XRT\s0 is
a Motif-based commercial software product that has been adapted by
\&\s-1CAIDA\s0 using a combination of C drivers and Perl function \fI\fIxrt2d()\fI\fR.
The Perl function \fI\fIxrt2d()\fI\fR provides access to the two dimensional
graphing capabilities of \s-1XRT\s0 from Perl.  To access the three dimensional
graphing using \s-1XRT\s0, use \fI\fIxrt3d()\fI\fR also supplied in the
\&\fIChart::Graph\fR package.
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
The options to \fI\fIxrt2d()\fI\fR are listed below.  Additional control over the
resulting graph is possible by using the \s-1XRT\s0 application itself once
the graph has been created.
.PP
.Vb 29
\& +--------------------------------------------------------------------------+
\& |                                OPTIONS                                   |
\& +----------------+--------------------------+------------------------------+
\& | Name           |  Options                 | Default                      |
\& +----------------+--------------------------+------------------------------+
\& |"output file"   |  (set your own)          | "untitled-xrt2d.gif"         |
\& |"output type"   |  "ps","xwd", "png", "jpg"| "xwd"                        |
\& |"x-axis title"  |  (set your own)          | "x-axis"                     |
\& |"y-axis title"  |  (set your own)          | "y-axis"                     |
\& |"set labels"    |  (set your own bar chart | none                         |
\& |                |   labels for each set of |                              |
\& |                |   data)                  |                              |
\& |"point labels"  |  (set your own labels for| none                         |
\& |                |   bars themselves)       |                              |
\& |"misc labels"   |  (misc annotation that   | none                         |
\& |                |   can be added to bar    |                              |
\& |                |   chart)                 |                              |
\& |"x time"        |  timescale if appropriate| "0"                          |
\& |"invert"        |  run bars horizontally   | "0" (vertically)             |
\& |                |  instead of vertically.  |                              |
\& |                |  1 = horizonally.        |                              |
\& |"header"        |  (set your own - can     | "header"                     |
\& |                |   be multiple lines)     |                              |
\& |"footer"        |  (set your own - can     | "footer"                     |
\& |                |   be multiple lines)     |                              |
\& |"style"         |  Style of chart - types  | "bar"                        |
\& |                |  include: bar, pie, area |                              |
\& |                |  stackedbar, stackedarea |                              |
\& +----------------+--------------------------+------------------------------+
.Ve
.PP
The \fI\fIxrt2d()\fI\fR function only accepts data in one form.  \f(CW\*(C`\e@data_sets\*(C'\fR:
a one dimensional array with a prefix of data options.: 
\&\f(CW\*(C`[[\e%data1_opts, \e@data1], [\e%data2_opts, \e@data2], [\e%data3_opts, \e@data3]]\*(C'\fR
\&\*(-- see example for more details on the syntax.
.PP
The data options are listed below.
.PP
.Vb 7
\& +--------------------------------------------------------------------------+
\& |                             DATA OPTIONS                                 |
\& +----------------+--------------------------+------------------------------+
\& | Name           |  Options                 | Default                      |
\& +----------------+--------------------------+------------------------------+
\& | "color"        | Any valid web page color | none                         |
\& +----------------+--------------------------+------------------------------+
.Ve
.Sh "\s-1DETAILS\s0 \s-1ON\s0 \s-1GRAPHICS\s0 \s-1CONVERTER\s0 \s-1OPTIONS\s0"
.IX Subsection "DETAILS ON GRAPHICS CONVERTER OPTIONS"
The xrt package supports only two graphics formats internally:
Postscript and the X windows format \s-1XWD\s0.  Additional raster graphics
formats are supported with Chart::Graph by using one of two graphics
converter packages: \fIImagemagick\fR and \fINetpbm\fR.
.PP
If you need to install a converter package, \fIImagemagick\fR
\&\fIhttp://www.imagemagick.org/\fR is probably preferable
simply for its comparatively simplicity.  It uses one program
\&\fIconvert\fR for all of it's conversion needs, so it is easy to manage
and simple for Chart::Graph to use.  Many \s-1UNIX\s0 systems come with some
collection of the \fINetpbm\fR utilities already installed, thus users
may be able to start using Chart::Graph without adding any additional
converters.  Alas, it is unlikely any distributions would include all
the converters for the newest graphics formats used by Chart::Graph.
In that case it may still preferable to use \fIImagemagick\fR simply for
the sake of avoiding installing over 80 utilities that come with
current distributions of \fINetpbm\fR.  For more information on the
current distribution of \fINetpbm\fR go to the current website at:
\&\fIhttp://netpbm.sourceforge.net/\fR
.PP
The xrt package also allows for multiple header and footers with each
graph.  As a result, instead of just the usual string, an array
reference containing the multiple strings for the header and footer
text.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
The following two examples show Chart::Graph::Xrt2d in different roles
and producing different styles of output.
.Sh "\s-1HORIZONTAL\s0 \s-1BAR\s0 \s-1GRAPH\s0"
.IX Subsection "HORIZONTAL BAR GRAPH"
The following example creates a two, two dimensional bars charts of
fictitious stock data from rival restaurants that is displayed in a
single graphic file \fIxrt2d\-1.jpg\fR.
.PP
.Vb 2
\& #make sure to include Chart::Graph
\& use Chart::Graph::Xrt2d qw(xrt2d);
.Ve
.PP
.Vb 15
\& # Call to xrt2d with two data sources.
\& xrt2d({"output file" => "xrt2d-1.jpg",
\&        "output type" => "jpg",
\&        "set labels"=> ["Joe's", "Ralph's"],
\&        # Flip graph from vertical to horizontal
\&        "invert" => 1,
\&        "point labels" => ["Jan/Feb", "Mar/Apr", "May/Jun", "Jul/Aug",
\&                         "Sep/Oct", "Nov/Dec"],
\&        "x-axis title" => "Month's tracked",
\&        "y-axis title" => "Stock prices for Rival restaurant chains"
\&       },
\&       [{"color" => "MistyRose"}, ["8", "13", "20", "45", "50", "100"]],
\&       [{"color" => "#000000"},   ["75", "50", "25", "25", "50", "75"]]
\&    )
\& )
.Ve
.Sh "\s-1VERTICAL\s0 \s-1BAR\s0 \s-1GRAPH\s0"
.IX Subsection "VERTICAL BAR GRAPH"
The following example is simply a more elaborate instance of the first
example. which produces the file \fIxrt2\-2.gif\fR.  Note the relationship
between sets and points.  Accidentally reversing the order will cause
unpredicable results.
.PP
.Vb 2
\& #make sure to include Chart::Graph
\& use Chart::Graph::Xrt2d qw(xrt2d);
.Ve
.PP
.Vb 10
\& xrt2d({"output file" => "xrt2d-2.gif",
\&                         "output type" => "gif",
\&                "set labels" => ["set1", "set2", "set3", "set4"],
\&                "point labels" => ["point1", "point2", "point3"]},
\&                # Each entry here corresponds to a set
\&                [{"color" => "MistyRose"}, ["15", "23", "10"]],
\&                [{"color" => "#0000FF"}, ["13", "35", "45"]],
\&                [{"color" => "#00FF00"}, ["15", "64", "24"]],
\&                [{"color" => "Navy"}, ["18", "48", "32"]],
\&      );
.Ve
.SH "MORE INFO"
.IX Header "MORE INFO"
For more information on \s-1XRT:\s0
.PP
.Vb 1
\& http://www.quest.com/xrt_pds/
.Ve
.SH "CONTACT"
.IX Header "CONTACT"
Send email to graph\-dev@caida.org is you have problems, questions,
or comments. To subscribe to the mailing list send mail to
graph\-dev\-request@caida.org with a body of \*(L"subscribe your@email.com\*(R"
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\& CAIDA Perl development team (cpan@caida.org)
.Ve

#!/usr/bin/perl -w
use strict;
use Carp;

# This script will generate PX and JX superstructures rather than
# Using Namot2. It will read in the individual helices, create a chain
# topology map and write the corresponding pdb file.

sub Initialize;
sub CreateTopologyMap;
sub WriteData;
sub IsInteger;
sub ReadNamotPDB;
sub Numerically;
sub GetCrossovers;
sub GetChain;
sub FindTerminal;
sub SetCrossovers;
sub CreatePics;
sub ReadSpecsFile;
sub AssignVals;
sub ReverseRes;

die "usage: $0 helix-1.pdb helix-2.pdb outfile.pdb crossover-spec-file\n"
    if (! @ARGV or $#ARGV < 3);

my ($helix1_loc, $helix2_loc, $output_fle, $crossovers_file) = @ARGV;
my ($periodicity, %ATOMS, $CStructure, @crossovers, $totChain, $is5prime); 
my ($isParallel, $half_turn, $counter);

my($opts) = ReadSpecsFile($crossovers_file);
AssignVals;

ReadNamotPDB($helix1_loc, \%ATOMS, 0, 0, 0);
ReadNamotPDB($helix2_loc, \%ATOMS, $opts->{"Trans"}{"x"}, $opts->{"Trans"}{"y"}, $opts->{"Trans"}{"z"});

for $counter (keys %ATOMS) {
    if (($counter % 2) == 0) {
	$ATOMS{$counter}  = ReverseRes(\%{ $ATOMS{$counter} });
    }
}
    
($CStructure, $totChain) = CreateTopologyMap($is5prime, $isParallel, \@crossovers, \%ATOMS);
WriteData($CStructure, $output_fle);
CreatePics($output_fle, $totChain);

sub CreateTopologyMap {
    my ($bl5, $helicesIsParallel, $cList, $atoms) = @_;
    my ($counter, $hashKey, $curr_chain, $curr_base, $curr_helix, %TOPO, $c1, $c2, %myCross, $eff_chain, $isDXCross, $isLast);
    my (@tmp, $chain_counter, %CrossoverStructure, $base_counter, $isEnd, @chain_lengths, @tmp1, $index, $usedPrevious, $cM);

    %myCross = SetCrossovers($cList);

    @tmp = sort Numerically keys %{ $atoms };

    for $counter (0 .. $#tmp) {
	@tmp1 = keys %{ $atoms->{$tmp[$counter]} };
	$chain_lengths[$counter] = $#tmp1 + 2;
	print "CHAIN " . ($counter + 1) . " LENGTH: " . $chain_lengths[$counter] . "\n";
    }

    $chain_counter = $base_counter = 1;
    
    $curr_chain = 0;
    while ($#tmp > -1) {
	$counter = $curr_base = 1;
	$isEnd = $isDXCross = $usedPrevious = $isLast = 0;

	$eff_chain = $tmp[0];
	$curr_helix = int(($eff_chain - 1)/2) + 1;
	if (($eff_chain % 2) == 0) {
	    $curr_chain = 2;
	} else {
	    $curr_chain = 1;
	}
	while (! $isEnd ) {
	    if (exists($atoms->{$eff_chain}{$curr_base}) or exists($myCross{$curr_helix}{$curr_chain}{$curr_base})) {
		if (exists($myCross{$curr_helix}{$curr_chain}{$curr_base})) { # base in crossover so do crossover
		    print "CROSSED from $curr_helix, $curr_chain, $curr_base to ";
		    ($curr_helix, $curr_chain, $curr_base,$cM) = split /\,/, $myCross{$curr_helix}{$curr_chain}{$curr_base};
		    print "$curr_helix, $curr_chain, $curr_base\n";
		    
		    $c2 = exists($atoms->{$eff_chain}{($curr_base - 1)});
		    if ($cM == 2 and ($c2 or $usedPrevious) and ! $isLast) { 
			$isDXCross = 1;
		    } else {
			$isDXCross = 0;
		    }
			
		    $eff_chain = 2 * ($curr_helix - 1) + $curr_chain;

		}

		if (exists($atoms->{$eff_chain}{$curr_base})) {
		    if ($#tmp == 1 and $cM == 2 and ! $usedPrevious) { # Connect the last two pieces of the DX Strand
			$myCross{$curr_helix}{$curr_chain}{($curr_base - 1)} = $myCross{$curr_helix}{$curr_chain}{$curr_base};
			delete $myCross{$curr_helix}{$curr_chain}{$curr_base};
			($curr_base, $isDXCross) = FindTerminal($curr_base, \% { $atoms->{$eff_chain} }, $chain_lengths[$curr_chain]);
			$isLast = 1;
		    }
		    %{ $CrossoverStructure{$chain_counter}{$base_counter} } = %{ $atoms->{$eff_chain}{$curr_base} };
#		    print "$chain_counter : $base_counter - $eff_chain : $curr_base\n";
		    delete $atoms->{$eff_chain}{$curr_base};
		    $base_counter++;
		    $usedPrevious = 1;
		}
	    }
	    if (! $isDXCross) {
		$curr_base++;
	    } else {
		$curr_base--;
	    }
	    if ($curr_base > $chain_lengths[$curr_chain] or $curr_base < 1) {
		$isEnd = 1;
	    }
	}

	@tmp = ();
	for $index (sort Numerically keys %{ $atoms }) {
	    @tmp1 = keys %{ $atoms->{$index} };
	    if ($#tmp1 == -1) {
		delete $atoms->{$index};
	    }
	    if ($index > $chain_counter) {
		push @tmp, $index;
	    }
	}

	for $index (1 .. $chain_counter) {
	    if (exists($atoms->{$index})) {
		push @tmp, $index;
	    }
	}

	$chain_counter++;
	$base_counter = 1;

    }

    $chain_counter--;
    return (\%CrossoverStructure, $chain_counter);
}

sub SetCrossovers {
    my ($cList) = @_;
    my ($b1, $b2, $c1, $c2, %myCross, $counter, $typeCross);

    for $counter (0 .. $#{ $cList }) {
	$c1 = GetChain($cList->[$counter]{"1"}{"Base"}, $cList->[$counter]{"1"}{"Helix"});
	$c2 = GetChain($cList->[$counter]{"2"}{"Base"}, $cList->[$counter]{"2"}{"Helix"});
	$b1 = $cList->[$counter]{"1"}{"Base"} +1;
	$b2 = $cList->[$counter]{"2"}{"Base"} +1;
	$typeCross = $cList->[$counter]{"TYPE"};

	if ($typeCross == 1) {
	    $myCross{$cList->[$counter]{"1"}{"Helix"}}{$c1}{$b1} = 
		$cList->[$counter]{"2"}{"Helix"} . "," . $c2 . "," . $b2 . ",$typeCross";
	    $myCross{$cList->[$counter]{"2"}{"Helix"}}{$c2}{$b2} = 
		$cList->[$counter]{"1"}{"Helix"} . "," . $c1 . "," . $b1 . ",$typeCross";
	} else {   
	    $myCross{$cList->[$counter]{"1"}{"Helix"}}{$c1}{$b1} = 
		$cList->[$counter]{"2"}{"Helix"} . "," . $c2 . "," . ($b2 - 1) . ",$typeCross";
	    
	    $myCross{$cList->[$counter]{"2"}{"Helix"}}{$c2}{($b2 - 1)} = 
		$cList->[$counter]{"1"}{"Helix"} . "," . $c1 . "," . $b1 . ",$typeCross";
	}
    }

    return %myCross;
}

sub FindTerminal {
    my ($resNum, $atoms, $chainLen) = @_;
    my ($counter, $isDecreasing);

    $counter = $resNum - 1;
    while (exists($atoms->{$counter})) {
	$counter--;
    }

    $isDecreasing = 0;
    if ($counter == ($resNum - 1)) {
	$counter = $resNum + 1;
	while (exists($atoms->{$counter}) and defined($atoms->{$counter})) {
	    $counter++;
	    $isDecreasing = 1;
	}
	$counter--;
    }
    

    return ($counter, $isDecreasing);
}

sub WriteData {
    my ($AtomData, $save_name) = @_;
    my ($atomKey, $counter, $fmt, $index, $atom, $chain);
    my ($outData, $header, $fmt2, $resCounter, $resName, $rn, $rc);

    $header = "HEADER                                 NUCLEIC ACID             0\n" .
	"TITLE                                            NAMOT Generated MODEL\n" .
	"KEYWDS                                                           MODEL\n";
    $fmt = "%-4s%7d%5s%4s%2s%4d%12.3f%8.3f%8.3f%6.2f%6.2f\n";
    $fmt2 = "%-4s%7d%9s%2s%4d\n";
    $index = 1;
    for $counter (sort Numerically keys %{ $AtomData }) {
	$chain = lc(chr(64 + $counter));
	for $resCounter (sort Numerically keys %{ $AtomData->{$counter} }) {
	    for $atomKey (sort Numerically keys %{ $AtomData->{$counter}{$resCounter} }) {
		$atom = \%{  $AtomData->{$counter}{$resCounter}{$atomKey} };
		$resName = $atom->{"RESNAME"};
		$outData .= sprintf($fmt, "ATOM", $index, $atom->{"NAME"}, $resName, $chain, $resCounter,
				    $atom->{"XCOORD"}, $atom->{"YCOORD"}, $atom->{"ZCOORD"}, 0,0);
		$index++;
		$rn = $resName;
	    }
	    $rc = $resCounter;
	}
	$outData .= sprintf($fmt2, "TER", $index, $rn, $chain, $rc);
	$index++
    }
    
    if (defined($outData)) {
	$outData = $header . $outData . "ENDMDL\n";

	open OUTDATA, "> $save_name" or die "Cannot write to file $save_name: $!\n";
	print OUTDATA $outData;
	close OUTDATA;
    } else {
	die "ERROR: No data written\n";
    }
}
	    
sub ReadNamotPDB {
    my ($filenm, $AtomData, $xoff, $yoff, $zoff) = @_;
    my ($inStr, $curr_chain, @tmp, $curr_res, $rec, $counter);

    @tmp = keys %{ $AtomData };
    $curr_chain = $#tmp + 2;

    $counter = 1;
    $curr_res = -1;
    $rec = ();
    open NAMOTFILE, $filenm or die "ERROR: Cannot open $filenm: $!\n";
    while (<NAMOTFILE>) {
	chomp;
	$inStr = $_;
	if ($inStr =~ /^ATOM\s+\d+(.{5})(.{4})\s+(\w)\s+(\d+)\s+(\-?\d+\.\d+)\s+(\-?\d+\.\d+)\s+(\-?\d+\.\d+)/) {
	    if ($4 != $curr_res and $curr_res > -1) {
		$AtomData->{$curr_chain}{$curr_res} = $rec;
		$rec = ();
		$counter = 1;
		$curr_res = $4;
	    } elsif ($curr_res == -1) {
		$curr_res = $4;
	    }
	    
	    $rec->{$counter} = (
				{
				    "NAME"    => $1,
				    "RESNAME" => $2,
				    "CHAIN"   => $3,
				    "RESNUM"  => $4,
				    "XCOORD"  => $5 + $xoff,
				    "YCOORD"  => $6 + $yoff,
				    "ZCOORD"  => $7 + $zoff,
				}
				);
	    $counter++;
	} elsif ($inStr =~ /^TER/) {
	    $AtomData->{$curr_chain}{$curr_res} = $rec;
	    $rec = ();
	    $curr_res = -1;
	    $curr_chain++;
	}
    }

    close NAMOTFILE;
}

sub Initialize {
    my ($invalid_output_file, $overwrite);
   -e $helix1_loc or die "Error trying to access $helix1_loc\n";
   -e $helix2_loc or die "Error trying to access $helix2_loc\n";
   -e $crossovers_file or die "Error trying to access the crossover specification file $crossovers_file\n";

   $invalid_output_file = 0;
   -e $output_fle or $invalid_output_file = 1;
    if ($invalid_output_file) {
	print "The file $output_fle already exists.\n";
    }

    while ($invalid_output_file) {
	$overwrite = input ("Overwrite? [y, n]: ");
	$overwrite =~ s/\s+$//; #remove the final newline
	if ($overwrite =~ /^y|Y$/) {
	    last;
	}elsif ($overwrite =~ /^n|N$/) {
	    $output_fle = "";
	    while (!($output_fle =~ /\w+/)) {
		$output_fle = input ("New file name: ");
		chomp($output_fle);
		$output_fle =~ s/\s+$//;
	    }
	    $invalid_output_file = 0;
	    -e $output_fle or $invalid_output_file = 1;
	    if ($invalid_output_file) {
		print "The file $output_fle already exists.\n";
	    }
	}
     }
    if (! $is5prime =~ /^[y|n]/) {
	die "Invalid value for is5prime, expected y or n\n";
    } else {
	if ($is5prime =~ /y/) {
	    $is5prime = 1;
	} else {
	    $is5prime = 0;
	}
    }
    
    for (4 .. 6) {
	if (! IsInteger($ARGV[$_])) {
	    die "ERROR: In argument " . ($_ + 1) . " expected integer. Got " . $ARGV[$_] . "\n";
	}
    }
}

sub IsInteger {
    my ($test_str) = $_[0];

    if ($test_str =~ /^\d+/) {
	return 1;
    } else {
	return 0;
    }
}

sub Numerically {
    ($a<=>$b);
}

sub GetChain {
# GetChain - gets the chain of a molecule
    my ($curr_group, $whichHelix) = @_;
    my ($returnval);

    $curr_group -= ($half_turn/2);

    while ($curr_group > $periodicity) {
	$curr_group -= $periodicity;
    }

    #print "5Prime " . $is5prime . "\n";

    if ($whichHelix == 1) {
	if ($is5prime and $isParallel) { #Parallel (PX)
	    if ($curr_group <= $half_turn) {
		$returnval = 1;
	    } else {
		$returnval = 2;
	    }
	} elsif (! $is5prime and $isParallel) { # Parallel (anti-PX)
	    if ($curr_group <= $half_turn) {
		$returnval = 2;
	    } else {
		$returnval = 1;
	    }
	} elsif ($is5prime and ! $isParallel) { # AntiParallel (DX)
	    if ($curr_group <= $half_turn) {
		$returnval = 1;
	    } else {
		$returnval = 2;
	    }
	} elsif (! $is5prime and ! $isParallel) { # AntiParallel (anti-DX)
	    if ($curr_group <= $half_turn) {
		$returnval = 2;
	    } else {
		$returnval = 1;
	    }
	}
    } else {
	if ($is5prime and $isParallel) { #Parallel (PX)
	    if ($curr_group <= $half_turn) {
		$returnval = 1;
	    } else {
		$returnval = 2;
	    }
	} elsif (! $is5prime and $isParallel) { # Parallel (anti-PX)
	    if ($curr_group <= $half_turn) {
		$returnval = 2;
	    } else {
		$returnval = 1;
	    }
	} elsif ($is5prime and ! $isParallel) { # AntiParallel (DX)
	    if ($curr_group <= $half_turn) {
		$returnval = 2;
	    } else {
		$returnval = 1;
	    }
	} elsif (! $is5prime and ! $isParallel) { # AntiParallel (anti-DX)
	    if ($curr_group <= $half_turn) {
		$returnval = 1;
	    } else {
		$returnval = 2;
	    }
	}
    }
	    
    return $returnval;
}

sub RegisterCrossover {   
    my ($rec) = (
		 {
		     "1" => (
			     {
				 "Helix" => $_[0],
				 "Base"  => $_[1],
			     }
			     ),
		     "2" => (
			     {
				 "Helix" => $_[2],
				 "Base"  => $_[3],
			     }
			     ),
		     "TYPE" => $_[4],
		 }
		 );
    push @crossovers, $rec;
}

sub CreatePics {
    my ($output_fle, $chains) = @_;
    my ($pic_fle, @colors, $counter, $script_fle);
    
    @colors = ("blue", "yellow", "red", "green", "cyan", "magenta", "orange", "black");
    $script_fle = $output_fle . ".script";

    $pic_fle = $output_fle;
    $pic_fle =~ s/\.pdb$//;
    
    open SCRIPTFLE, "> $script_fle" or die "Cannot write to script file $script_fle: $!\n";
    print SCRIPTFLE "load pdb na $output_fle\n";
    print SCRIPTFLE "\nwrite pdb $output_fle\n";
    print SCRIPTFLE "write amber " . $pic_fle . "_amber.pdb\n";
    print SCRIPTFLE "# This will color the different strand of the molecule\n";
    print SCRIPTFLE "set depth_cueing on\n";
    print SCRIPTFLE "render\n";
    
    if ($chains > 8) {
	$chains = 8;
    }

    for $counter (0 .. ($chains - 1)) {
	print SCRIPTFLE "set color m1:" . ($counter + 1) . ":*:* "  . $colors[$counter] . "\n";
	print SCRIPTFLE "render\n";
    }

    print SCRIPTFLE "# Create Pictues...\n";
    print SCRIPTFLE "write png " . $pic_fle . ".png\n";
    print SCRIPTFLE "set space *\n";
    print SCRIPTFLE "render\n";
    print SCRIPTFLE "write png " . $pic_fle . "_cpk.png\n";
    print SCRIPTFLE "close\n";
    
    close SCRIPTFLE;

}

sub ReadSpecsFile {
    my ($cfile) = $_[0];
    my (%specs, $validCounter, $myKey, $isValid, $line_in, $rec);

    $validCounter = $isValid = 0;
    open CROSSFILE, $cfile or die "Error while reading $cfile: $!\n";
    while (<CROSSFILE>) {
	chomp;
	$line_in = $_;
	if ($line_in =~ /^Helix (\d+)\s+(\d+):(\d+)\s+(\d+)\s+bases/) {
	    $myKey = "Helix" . $1;
	    $specs{$myKey} = (
			      {
				  "MajorGroove"   => $2,
				  "MinorGroove"   => $3,
				  "Periodicity"   => ($2 + $3),
				  "TotalBases"    => $4,
			      }
			      );
	    $validCounter++;
	} elsif ($line_in =~ /^Transalation: (\S+)\s+(\S+)\s+(\S+)/) {
	    $specs{"Trans"} = (
			       {
				   "x" => $1,
				   "y" => $2,
				   "z" => $3,
			       }
			       );
	    $validCounter++;
	} elsif ($line_in =~ /^Parallel: ([1|0])/) {
	    $specs{"isParallel"} = $1;
	    $validCounter++;
	} elsif ($line_in =~ /^5PrimeToLeft: ([1|0])/) {
	    $specs{"5prime"} = $1;
	    $validCounter++;
	}elsif ($line_in =~ /CROSSOVERS/) {
            $isValid = 1; # file must have word "CROSSOVERS"
	    $validCounter++;
        }elsif ($isValid and $line_in =~ /^(\d+):(\d+)->(\d+):(\d+) TYPE:([1|2])$/) { # valid crossover spec
	    $rec = (
		    {
			"TYPE" => $5,
			"BASE" => $2,
		    }
		    );
	    push @{ $specs{"crossovers"} }, $rec;
	}
    }
    close CROSSFILE;

    die "ERROR: No crossvers found while reading file $cfile\n"
	if (! $isValid or $validCounter < 5);
    return \%specs;
}

sub AssignVals {
    my ($counter, $rec);

    $is5prime = $opts->{"5prime"};
    $isParallel = $opts->{"isParallel"};
    $half_turn = $opts->{"Helix1"}{"MinorGroove"};
    $periodicity = $opts->{"Helix1"}{"MajorGroove"} + $half_turn;
    
    for $counter (@{ $opts->{"crossovers"} }) {
	RegisterCrossover(1, $counter->{"BASE"}, 2, $counter->{"BASE"}, $counter->{"TYPE"});
    }

}

sub ReverseRes {
    my ($chainData) = $_[0];
    my ($resNum, $atom, $counter, @tmp, %tmpHash);

    @tmp = sort Numerically keys %{ $chainData };

    for $counter (0 .. $#tmp) {
	$resNum = ($#tmp - $counter) + 1;
	%{ $tmpHash{($resNum)} } = %{ $chainData->{$tmp[$counter]} };
    }

    return \%tmpHash;
}

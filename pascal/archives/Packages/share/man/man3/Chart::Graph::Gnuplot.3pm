.\" Automatically generated by Pod::Man v1.34, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Graph::Gnuplot 3"
.TH Graph::Gnuplot 3 "2006-06-07" "perl v5.8.0" "User Contributed Perl Documentation"
.SH "NAME"
Chart::Graph::Gnuplot
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Chart::Graph::Gnuplot qw(&gnuplot);
.Ve
.PP
.Vb 3
\& gnuplot(\e%global_options, [\e%data_set_options, \e@matrix],
\&                           [\e%data_set_options, \e@x_column, \e@y_column],
\&                           [\e%data_set_options, < filename >], ... );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fI\fIgnuplot()\fI\fR is a function in module Chart::Graph that lets you
generate graphs on the fly in perl. It was written as a front-end
application to gnuplot for hassle-free generation of
graphs. \fI\fIgnuplot()\fI\fR can be supplied with many of the same options and
arguments that can be given to gnuplot. For more information on
\&\fIgnuplot\fR see the end of this section.
.SH "OPTIONS"
.IX Header "OPTIONS"
\&\fI\fIgnuplot()\fI\fR has a very large number of options corresponding to
options available with the gnuplot application itself.  This Perl
wrapper provides a large subset of the functionality of the
application.
.PP
.Vb 57
\& +----------------------------------------------------------------------------+
\& |                             GLOBAL OPTIONS:                                |
\& +----------------+-----------------------------+-----------------------------+
\& | NAME           |  OPTIONS                    |        DEFAULT              |
\& +----------------+-----------------------------+-----------------------------+
\& |'title'         |  set your own title         |     'untitled'              |
\& |'output type'   |  'pbm','gif','tgif','png',  |     'png'                   |
\& |                |   'svg' or "eps $epsoptions"|                             |
\& |'output file'   |  set your own output file,  |     'untitled-gnuplot.png'  |
\& |                |   undef to output to STDOUT |                             |
\& |'x-axis label'  |  set your own label         |     'x-axis'                |
\& |'y-axis label'  |  set your own label         |     'y-axis'                |
\& |'x2-axis label' |  set your own label         |     none                    |
\& |'y2-axis label' |  set your own label         |     none                    |
\& |'logscale x'    |  0 or 1                     |     0                       |
\& |'logscale y'    |  0 or 1                     |     0                       |
\& |'logscale x2'   |  0 or 1                     |     0                       |
\& |'logscale y2'   |  0 or 1                     |     0                       |
\& | 'xtics'        | set your own tics on x-axis |     none                    |
\& |                |   (see example below)       |                             |
\& | 'x2tics'       | set your own tics on x2-axis|     none                    |
\& |                |   (see example below)       |                             |
\& | 'ytics'        | set your own tics on y-axis |     none                    |
\& |                |   (see example below)       |                             |
\& | 'y2tics'       | set your own tics on y2-axis|     none                    |
\& |                |   (see example below)       |                             |
\& | 'xrange'       | set xrange, accepts both    |     none                    |
\& |                |  string '[$xmin:$xmax]'     |                             |
\& |                |  or arrayref [$xmin,$xmax]  |                             |
\& | 'yrange'       | set yrange, see xrange      |     none                    |
\& |                |                             |                             |
\& | 'uts'          | set your own range in unix  |     none                    |
\& |                |  timestamps, array ref:     |                             |
\& |                |  [start_ts,end_ts,<scale>,  |                             |
\& |                |   <use_local_tz> ]          |                             |
\& |                |  see UNIX TIMESTAMPS example|                             |
\& | 'xdata'        | 'time' to indicate that     |     none                    |
\& |                |  x-axis is date/time data   |                             |
\& | 'ydata'        | 'time' to indicate that     |     none                    |
\& |                |  y-axis is date/time data   |                             |
\& | 'x2data'       | 'time' to indicate that     |     none                    |
\& |                |  x2-axis is date/time data  |                             |
\& | 'y2data'       | 'time' to indicate that     |     none                    |
\& |                |  y2-axis is date/time data  |                             |
\& | 'timefmt'      | "Input date/time string"    |     none                    |
\& |                |  see Gnuplot manual for info|                             |
\& | 'format'       | array ref: First element is |                             |
\& |                |  axis: 'x', 'y', 'x2', 'y2'.|                             |
\& |                |  Second element is          |                             |
\& |                |  'output date/time string"  |                             |
\& |                |  see Gnuplot manual for info|                             |
\& | 'extra_opts'   | set your own Gnuplot        |     none                    |
\& |                |  options, either an arrayref|                             |
\& |                |  or string ("\en"-separated) |                             |
\& | 'size'         | scale the display size of   |     none                    |
\& |                |  the plot, arrayref [$x, $y]|                             |
\& +----------------+-----------------------------+-----------------------------+
.Ve
.PP
.Vb 17
\& +----------------------------------------------------------------------------+
\& |                       Data Set Options:                                    |
\& +----------------+-----------------------------+-----------------------------+
\& |      Name      |          Options            |           Default           |
\& +----------------+-----------------------------+-----------------------------+
\& | 'type'         | 'matrix', 'columns', 'file',|      none                   |
\& |                |  'function', see examples   |                             |
\& |                |  below                      |                             |
\& | 'title'        | set your own title          |     'untitled data'         |
\& | 'style'        | 'points','lines','impulses' |     'points'                |
\& |                |  'errorbars', etc...        |                             |
\& |                |  see ERRORBARS example      |                             |
\& | 'axes'         | 'x1y1', 'x2y2', 'x1y2', etc.|      'x1y1'                 |
\& | 'using'        | map data to what will be    |      '1:2'                  |
\& |                |  plotted, see ERRORBARS     |                             |
\& |                |  example                    |                             |
\& +----------------+-----------------------------+-----------------------------+
.Ve
.PP
Data can be presented to \fIChart::Graph::Gnuplot\fR in one of 3 formats for
the convenience of the user:
.PP
.Vb 1
\& \e@matrix: an array reference of [x,y] pairs of data
.Ve
.PP
Alternatively:
.PP
.Vb 2
\& \e@x_column, \e@y_column: two array references of data of equal length.
\& \e@x_column is the x-axis data. \e@y_column is the y-axis data.
.Ve
.PP
Finally, data can be stored in a file.
.Sh "\s-1USING\s0 \s-1GNUPLOT\s0 \s-1TO\s0 \s-1READ\s0 \s-1AND\s0 \s-1PLOT\s0 \s-1DATE/TIME\s0 \s-1DATA\s0 \s-1DIRECTLY\s0"
.IX Subsection "USING GNUPLOT TO READ AND PLOT DATE/TIME DATA DIRECTLY"
\&\fIGnuplot\fR now has the capability to read date/time data and to create
graphs which display date/time on any axis.  Unfortunately, mechanism
for reading data is less sophisticated than the mechanism for writing
data.  \fIChart::Graph::Gnuplot\fR implements date/time data in the same
way as \fIGnuplot\fR itself is presently implemented for consistency with
the application.
.PP
Any axis can be set to read date/time data instead of numerical
data. This is done by setting the options \f(CW\*(C`xdata\*(C'\fR, \f(CW\*(C`ydata\*(C'\fR,
\&\f(CW\*(C`x2data\*(C'\fR, or \f(CW\*(C`y2data\*(C'\fR to the value \f(CW\*(C`time\*(C'\fR.  Unfortunately, you can
set only one format to read your data; therefore, consistency is
advised.  The input format is set using the \f(CW\*(C`timefmt\*(C'\fR command noted
above.  The \f(CW\*(C`timefmt\*(C'\fR command takes a string consisting of the
elements noted below.
.PP
\&\fIGnuplot\fR uses the same format codes for date/time input and output so
the following table applies to both situations.
.PP
.Vb 14
\& +---------+------------------------------------------------------------------+
\& |  Format |                    Explanation                                   |
\& +---------+------------------------------------------------------------------+
\& |    %d   |       day of the month, 1--31                                    |
\& |    %m   |       month of the year, 1--12                                   |
\& |    %y   |       year, 0--99                                                |
\& |    %Y   |       year, 4-digit                                              |
\& |    %j   |       day of the year, 1--365                                    |
\& |    %H   |       hour, 0--24                                                |
\& |    %M   |       minute, 0--60                                              |
\& |    %S   |       second, 0--60                                              |
\& |    %b   |       three-character abbreviation of the name of the month      |
\& |    %B   |       name of the month                                          |
\& +---------+------------------------------------------------------------------+
.Ve
.PP
In addition there are some additional special cases for reading
date/time data. To quote from \fIGnuplot\fR manual: "Any character is
allowed in the string, but must match exactly. \f(CW\*(C`\et\*(C'\fR (tab) is
recognized. Backslash-octals (\f(CW\*(C`\ennn\*(C'\fR) are converted to char. If there is
no separating character between the time/date elements, then \f(CW%d\fR, \f(CW%m\fR,
\&\f(CW%y\fR, \f(CW%H\fR, \f(CW%M\fR and \f(CW%S\fR read two digits each, \f(CW%Y\fR reads four digits and \f(CW%j\fR
reads three digits. \f(CW%b\fR requires three characters, and \f(CW%B\fR requires as
many as it needs."  \fIGnuplot\fR uses the space character as white space
pattern match \- essentially the same as Perl's: \f(CW\*(C`\es*\*(C'\fR.
.PP
\&\fIGnuplot\fR normally uses whitespace to separate datasets.  However,
\&\fIGnuplot\fR does recognize white space specified in the \f(CW\*(C`timefmt\*(C'\fR
string.  So for example, x\-y data can be specified in columns like
this:
.PP
.Vb 1
\& 25/01/2001 03:05:39 2.05e-5
.Ve
.PP
The \f(CW\*(C`timefmt\*(C'\fR string required would be: \f(CW"%d/%m/%y %H:%M:%S"\fR.  Note
that while the month and month abbreviation can be accepted, any other
text must be matched (excluded) in the timefmt string.  Certainly,
representing dates as numerically is probably the most conservative.
.PP
Creating date/time labels for any of the axes is basically analogous.
The \fIChart::Graph:Gnuplot\fR global option is \f(CW\*(C`format\*(C'\fR, and it takes a
two element array reference: the axis to be plotted and the format
string.  In addition to the time options listed above, \f(CW\*(C`format\*(C'\fR
supports the following additional codes for formatting the numerical
data on the axes.
.PP
.Vb 17
\& +-------------+--------------------------------------------------------------+
\& |  Format     |                Explanation                                   |
\& +-------------+--------------------------------------------------------------+
\& |    %f       |   floating point notation                                    |
\& |    %e or %E |   exponential notation; an "e" or "E" before the power       |
\& |    %g or %G |   the shorter of %e (or %E) and %f                           |
\& |    %x or %X |   hex                                                        |
\& |    %o or %O |   octal                                                      |
\& |    %t       |   mantissa to base 10                                        |
\& |    %l       |   mantissa to base of current logscale                       |
\& |    %s       |   mantissa to base of current logscale; scientific power     |
\& |    %T       |   power to base 10                                           |
\& |    %L       |   power to base of current logscale                          |
\& |    %S       |   scientific power                                           |
\& |    %c       |   character replacement for scientific power                 |
\& |    %P       |   multiple of pi                                             |
\& +-------------+--------------------------------------------------------------+
.Ve
.PP
As in the case of input there some additional options related to these
output formats.  Again to quote the \fIGnuplot\fR manual "Other
acceptable modifiers (which come after the \fI%\fR but before the format
specifier) are \fI\-\fR, which left-justifies the number; \fI+\fR, which
forces all numbers to be explicitly signed; \fI#\fR, which places a
decimal point after floats that have only zeroes following the decimal
point; a positive integer, which defines the field width; \fI0\fR (the
digit, not the letter) immediately preceding the field width, which
indicates that leading zeroes are to be used instead of leading
blanks; and a decimal point followed by a non-negative integer, which
defines the precision (the minimum number of digits of an integer, or
the number of digits following the decimal point of a float)."
.PP
\&\fIGnuplot\fR also provides more flexibility in terms of the output format
codes available for date/time.  In addition to those shared with
input, the following codes can be used for formatting output date/time
axes only.
.PP
.Vb 18
\& +-------------+--------------------------------------------------------------+
\& |  Format     |                Explanation                                   |
\& +-------------+--------------------------------------------------------------+
\& |    %a       |   abbreviated name of day of the week                        |
\& |    %A       |   full name of day of the week                               |
\& |    %b or %h |   abbreviated name of the month                              |
\& |    %B       |   full name of the month                                     |
\& |    %D       |   shorthand for "%m/%d/%y"                                   |
\& |    %H or %k |   hour, 0--24                                                |
\& |    %I or %l |   hour, 0--12                                                |
\& |    %p       |   "am" or "pm"                                               |
\& |    %r       |   shorthand for "%I:%M:%S %p"                                |
\& |    %R       |   shorthand for %H:%M"                                       |
\& |    %T       |   shorthand for "%H:%M:%S"                                   |
\& |    %U       |   week of the year (week starts on Sunday)                   |
\& |    %w       |   day of the week, 0--6 (Sunday = 0)                         |
\& |    %W       |   week of the year (week starts on Monday)                   |
\& +-------------+--------------------------------------------------------------+
.Ve
.PP
Finally, \fIChart::Graph::Gnuplot\fR has an extension to support \s-1UNIX\s0
timestamps.  Note this \fBnot\fR built into \fIGnuplot\fR itself.
Users can access this option by setting the \f(CW\*(C`xrange\*(C'\fR using the \f(CW\*(C`uts\*(C'\fR 
option instead.  \s-1UNIX\s0 timestamps are only available on the x\-axis at this 
time.  They cannot be used on y, x2, or y2.  See the last example for more 
details on using \s-1UNIX\s0 timestamps.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
The following are four examples on how to use \fIChart::Graph::Gnuplot\fR in
a variety of settings.
.Sh "\s-1GENERAL\s0 \s-1EXAMPLE\s0"
.IX Subsection "GENERAL EXAMPLE"
The following example illustrates most of the general capabilities of
\&\fIChart::Graph::Gnuplot\fR. It creates the output file \fIgnuplot1.png\fR.
in the \fIpng\fR graphics format.  The data is coming from all three
sources.  The first data source is a matrix, the second is a column,
and the last is an external data file.
.PP
.Vb 1
\&  use Chart::Graph::Gnuplot qw(gnuplot);
.Ve
.PP
.Vb 20
\&  gnuplot({'title' => 'foo',
\&           'x2-axis label' => 'bar',
\&           'logscale x2' => '1',
\&           'logscale y' => '1',
\&           'output type' => 'png',
\&           'output file' => 'gnuplot1.png',
\&           'xtics' => [ ['small\enfoo', 10], ['medium\enfoo', 20], ['large\enfoo', 30] ],
\&           'ytics' => [10,20,30,40,50],
\&           'extra_opts' => 'set key left top Left'},
\&          [{'title' => 'data1',
\&            'type' => 'matrix'}, [[1, 10],
\&                                  [2, 20],
\&                                  [3, 30]] ],
\&          [{'title' => 'data2',
\&            'style' => 'lines',
\&            'type' => 'columns'}, [8, 26, 50, 60, 70],
\&                                  [5, 28, 50, 60, 70] ],
\&          [{'title' => 'data3',
\&            'style' => 'lines',
\&            'type' => 'file'}, './samplefile'],);
.Ve
.Sh "\s-1ERRORBARS\s0"
.IX Subsection "ERRORBARS"
\&\fIGnuplot\fR supports errorbars to aid in data interpretation.  To use an
arbitrary number of data columns (for errorbars), set \f(CW\*(C`style\*(C'\fR to
\&\f(CW\*(C`errorbars\*(C'\fR and include extra data columns.  The example below
produces the file \fIgnuplot2.png\fR
.PP
Note the following: These columns \s-1MUST\s0 be the the following formats:
\&\f(CW\*(C`(x, y, ydelta)\*(C'\fR, \f(CW\*(C`(x, y, ylow, yhigh)\*(C'\fR, \f(CW\*(C`(x, y, xdelta)\*(C'\fR, \f(CW\*(C`(x, y,
xlow, xhigh)\*(C'\fR, \f(CW\*(C`(x, y, xdelta, ydelta)\*(C'\fR, or \f(CW\*(C`(x, y, xlow, xhigh,
ylow, yhigh)\*(C'\fR This will only work with data type \f(CW\*(C`columns\*(C'\fR. Also, you
\&\s-1MUST\s0 use the \f(CW\*(C`using\*(C'\fR option to specify how columns of the data file
are to be assigned to \f(CW\*(C`x\*(C'\fR, \f(CW\*(C`y\*(C'\fR, \f(CW\*(C`ydelta\*(C'\fR, \f(CW\*(C`ylow\*(C'\fR and \f(CW\*(C`yhigh\*(C'\fR,
\&\f(CW\*(C`xdelta\*(C'\fR, \f(CW\*(C`xlow\*(C'\fR and \f(CW\*(C`xhigh\*(C'\fR.
.PP
.Vb 1
\&     use Chart::Graph::Gnuplot qw(gnuplot);
.Ve
.PP
.Vb 65
\&     gnuplot({"title" => "Examples of Errorbars",
\&              "xrange" => "[:11]",
\&              "yrange" => "[:45]",
\&              "output file" => "gnuplot2.gif",
\&              "output type" => "gif",
\&             },
\&             # dataset 1
\&             [{"title" => "yerrorbars",
\&               "style" => "yerrorbars",
\&               "using" => "1:2:3:4",
\&               "type" => "columns"},
\&              [ 1, 2, 3, 4, 5, 6 ], # x
\&              [ 5, 7, 12, 19, 28, 39 ], # y
\&              [ 3, 5, 10, 17, 26, 38 ], # ylow
\&              [ 6, 8, 13, 20, 30, 40 ] ], # yhigh
\&             # dataset 2
\&             [{"title" => "xerrorbars",
\&               "style" => "xerrorbars",
\&               "using" => "1:2:3:4",
\&               "type" => "columns"},
\&              [ 4, 5, 6, 7, 8, 9 ], # x
\&              [ 1, 4, 5, 6, 7, 10 ], # y
\&              [ 3.3, 4.4, 5.5, 6.6, 7.7, 8.8 ], # xlow
\&              [ 4.1, 5.2, 6.1, 7.3, 8.1, 10 ] ], # xhigh
\&             # dataset 3
\&             [{"title" => "xyerrorbars",
\&               "style" => "xyerrorbars",
\&               "using" => "1:2:3:4:5:6",
\&               "type" => "columns"},
\&              [ 1.5, 2.5, 3.5, 4.5, 5.5, 6.5 ], # x
\&              [ 2, 3.5, 7.0, 14, 15, 20 ], # y
\&              [ 0.9, 1.9, 2.8, 3.7, 4.9, 5.8 ], # xlow
\&              [ 1.6, 2.7, 3.7, 4.8, 5.6, 6.7 ], # xhigh
\&              [ 1, 2, 3, 5, 7, 8 ], # ylow
\&              [ 5, 7, 10, 17, 18, 24 ] ], # yhigh
\&             # dataset 4
\&             [{"title" => "xerrorbars w/ xdelta",
\&               "style" => "xerrorbars",
\&               "using" => "1:2:3",
\&               "type" => "columns"},
\&              [ 4, 5, 6, 7, 8, 9 ], # x
\&              [ 2.5, 5.5, 6.5, 7.5, 8.6, 11.7 ], # y
\&              [ .2, .2, .1, .1, .3, .3 ] ], # xdelta
\&             # dataset 5
\&             [{"title" => "yerrorbars w/ ydelta",
\&               "style" => "yerrorbars",
\&               "using" => "1:2:3",
\&               "type" => "columns"},
\&              [ .7, 1.7, 2.7, 3.7, 4.7, 5.7 ], # x
\&              [ 10, 15, 20, 25, 30, 35 ], # y
\&              [ .8, 1.2, 1.1, 2.1, 1.3, 3.3 ] ], # ydelta
\&             # dataset 6
\&             [{"title" => "dummy data",
\&               "type" => "matrix"},
\&              [ [1,1] ]],
\&             # dataset 7
\&             [{"title" => "xyerrorbars w/ xydelta",
\&               "style" => "xyerrorbars",
\&               "using" => "1:2:3:4",
\&               "type" => "columns"},
\&               [ 7.5, 8.0, 8.5, 9.0, 9.5, 10.0 ], # x
\&               [ 30, 27, 25, 23, 27, 33 ], # y
\&               [ .2, .1, .3, .6, .4, .3 ], # xdelta
\&              [ .8, .7, .3, .6, 1.0, .3 ] ], # ydelta
\&           );
.Ve
.Sh "\s-1PLOTTING\s0 \s-1DATES\s0 \- \s-1CUSTOM\s0 \s-1GNUPLOT\s0 \s-1OPTIONS\s0"
.IX Subsection "PLOTTING DATES - CUSTOM GNUPLOT OPTIONS"
As noted above, \fIChart::Graph::Gnuplot\fR includes support for plotting
date and times as source data.  the following shows how to plot data,
where the x\-axis contains dates, and the y\-axis contains stock prices
from a major computer major during the \*(L"dot\-com meltdown.\*(R" For date
and time data that requires high precision, using \s-1UNIX\s0 time stamps is
probably the best solution (see below.)  As used in the first example,
any option available to \fIGnuplot\fR can be passed to \fIGnuplot\fR using
the \f(CW\*(C`extra_opts\*(C'\fR option. This example uses this feature to enable two
options: a grid over the graph and a timestamp for when the graph was
created.
.PP
.Vb 1
\&  use Chart::Graph::Gnuplot qw(gnuplot);
.Ve
.PP
.Vb 4
\&  #Debugging aid - save the temporary files if desired
\&  #$Chart::Graph::save_tmpfiles = 1;
\&  #Debugging aid - turn on extra debugging messages
\&  #$Chart::Graph::debug = 1;
.Ve
.PP
.Vb 1
\&  # Call and "usual" global parameters
.Ve
.PP
.Vb 36
\&  gnuplot({'title' => 'Corporate stock values for a major computer maker',
\&           'x-axis label' => 'Month and Year',
\&           'y-axis label' => 'Stock price',
\&           'output type' => 'png',
\&           'output file' => 'gnuplot3.png',
\&           # Setting date/time specific options.
\&           'xdata' => 'time',
\&           'timefmt' => '%m/%d/%Y',
\&           'format' => ['x', '%m/%d/%Y'],
\&           # Set output range - note quoting of date string
\&           'xrange' => '["06/01/2000":"08/01/2001"]',
\&           'extra_opts' => join("\en", 'set grid', 'set timestamp'),
\&          },
\&          # Data for when stock opened
\&          [{'title' => 'open',
\&            'type' => 'matrix',
\&            'style' => 'lines',
\&           },
\&           [
\&            ['06/01/2000',  '81.75'],
\&            ['07/01/2000', '52.125'],
\&            ['08/01/2000', '50.3125'],
\&            ['09/01/2000', '61.3125'],
\&            ['10/01/2000', '26.6875'],
\&            ['11/01/2000', '19.4375'],
\&            ['12/01/2000', '17'],
\&            ['01/01/2001', '14.875'],
\&            ['02/01/2001', '20.6875'],
\&            ['03/01/2001', '17.8125'],
\&            ['04/01/2001', '22.09'],
\&            ['05/01/2001', '25.41'],
\&            ['06/01/2001', '20.13'],
\&            ['07/01/2001', '23.64'],
\&            ['08/01/2001', '19.01'],
\&           ]
\&          ],
.Ve
.PP
.Vb 23
\&          # Data for stock high
\&          [{'title' => 'high',
\&            'type' => 'matrix',
\&            'style' => 'lines',
\&           },
\&           [
\&            ['06/01/2000', '103.9375'],
\&            ['07/01/2000', '60.625'],
\&            ['08/01/2000', '61.50'],
\&            ['09/01/2000', '64.125'],
\&            ['10/01/2000', '26.75'],
\&            ['11/01/2000', '23'],
\&            ['12/01/2000', '17.50'],
\&            ['01/01/2001', '22.50'],
\&            ['02/01/2001', '21.9375'],
\&            ['03/01/2001', '23.75'],
\&            ['04/01/2001', '27.12'],
\&            ['05/01/2001', '26.70'],
\&            ['06/01/2001', '25.10'],
\&            ['07/01/2001', '25.22'],
\&            ['08/01/2001', '19.90'],
\&           ]
\&          ],
.Ve
.PP
.Vb 6
\&          # Data for stock close
\&          [{'title' => 'close',
\&            'type' => 'matrix',
\&            'style' => 'lines',
\&           },
\&           [
.Ve
.PP
.Vb 18
\&            ['06/01/2000', '52.375'],
\&            ['07/01/2000', '50.8125'],
\&            ['08/01/2000', '60.9375'],
\&            ['09/01/2000', '25.75'],
\&            ['10/01/2000', '19.5625'],
\&            ['11/01/2000', '16.50'],
\&            ['12/01/2000', '14.875'],
\&            ['01/01/2001', '21.625'],
\&            ['02/01/2001', '18.25'],
\&            ['03/01/2001', '22.07'],
\&            ['04/01/2001', '25.49'],
\&            ['05/01/2001', '19.95'],
\&            ['06/01/2001', '23.25'],
\&            ['07/01/2001', '18.79'],
\&            ['08/01/2001', '18.55'],
\&           ]
\&          ]
\&);
.Ve
.Sh "\s-1UNIX\s0 \s-1TIMESTAMPS\s0"
.IX Subsection "UNIX TIMESTAMPS"
\&\fIChart::Graph::Gnuplot\fR can convert Unix timestamps into normal dates
for x\-axis values. Collisions with existing user x\-tics are can be
remedied by prepending a literal '\en' (or \*(L"\e\en\*(R") to their tic\-labels.
The 'uts' option takes an array ref with 2 to 4 elements:
[ start_timestamp, end_timestamp, <scale>, <use_local_timezone> ]
If the optional element 'scale' is > 1 the number of tics will be reduced.
If the optional element 'use_local_timezone' is set to non-zero value
the local timezone is used, \s-1UTC\s0 is assumed otherwise.
The variables \fI$Chart::Graph::Gnuplot::show_year\fR and 
\&\fI$Chart::Graph::Gnuplot::show_seconds\fR influence the formatting of the x\-tics.
.PP
.Vb 1
\&    [...]
.Ve
.PP
.Vb 10
\&    %options = (
\&                 'title' => 'uts example',
\&                 'output file' => 'gnuplot4.gif',
\&                 'output type' => 'gif',
\&                 'x2-axis label' => 'time',
\&                 'xtics' => [ ['\en9pm UTC', 954795600] ],
\&                 'ytics' => [10,20,30,40,50],
\&                 'extra_opts' => 'set nokey',
\&                 'uts' => [954791100, 954799300],
\&               );
.Ve
.PP
.Vb 14
\&    $plot = [{'title' => 'Your title',
\&              'type' => 'matrix'},
\&              [
\&                [954792100, 10],
\&                [954793100, 18],
\&                [954794100, 12],
\&                [954795100, 26],
\&                [954795600, 13], # 21:00
\&                [954796170, 23],
\&                [954797500, 37],
\&                [954799173, 20],
\&                [954799300, 48],
\&              ],
\&            ];
.Ve
.PP
.Vb 1
\&    gnuplot(\e%options, $plot);
.Ve
.PP
\&\fBNote:\fR The present implementation of \s-1UNIX\s0 time stamps only supports
assigning \fIxtics\fR for x\-axis labels.  Using the Gnuplot directive:
\&\f(CW\*(C`format\*(C'\fR is not supported.
.Sh "\s-1FUNCTIONS\s0"
.IX Subsection "FUNCTIONS"
\&\fIChart::Graph::Gnuplot\fR supports the plotting of functions, this can
be mixed with other data\-types:
.PP
.Vb 4
\&   my %options = (
\&                   'title' => 'plot functions example',
\&                   'output file' => 'gnuplot5.png',
\&                 );
.Ve
.PP
.Vb 12
\&   my $data = [{ 'title' => 'data 1',
\&                 'style' => 'lines',
\&                 'type' => 'matrix',
\&               },
\&               [
\&                 [0,10],
\&                 [3,30],
\&                 [6,0],
\&                 [9,-10],
\&                 [12,-0],
\&               ]
\&              ];
.Ve
.PP
.Vb 6
\&   my $fnc1 = [{ 'title' => 'function 1',
\&                 'style' => 'lines',
\&                 'type' => 'function',
\&               },
\&               '10*sin(x)+2*cos(1.1 * x)+.5*tan(x)'
\&              ];
.Ve
.PP
.Vb 6
\&   my $fnc2 = [{ 'title' => 'function 2',
\&                 'style' => 'lines',
\&                 'type' => 'function',
\&               },
\&              '20*sin(sqrt(2**x))/sqrt(2**x)'
\&              ];
.Ve
.PP
.Vb 1
\&    gnuplot(\e%options, $data, $fnc1, $fnc2);
.Ve
.SH "MORE INFO"
.IX Header "MORE INFO"
This version of \fIChart::Graph::Gnuplot\fR was tested against
Gnuplot Version 4.0 patchlevel 0, some features might not work
on older versions of gnuplot. 
.PP
For more information on gnuplot, please see the gnuplot web page:
.PP
.Vb 1
\& http://www.gnuplot.org/
.Ve
.SH "CONTACT"
.IX Header "CONTACT"
Send email to graph\-dev@caida.org is you have problems, questions,
or comments. To subscribe to the mailing list send mail to
graph\-dev\-request@caida.org with a body of \*(L"subscribe your@email.com\*(R"
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\& CAIDA Perl development team (cpan@caida.org)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\& gnuplot(1).
.Ve

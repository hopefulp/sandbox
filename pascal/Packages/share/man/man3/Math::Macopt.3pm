.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Macopt 3"
.TH Macopt 3 "2006-01-15" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "NAME"
\&\f(CW\*(C`Math::Macopt\*(C'\fR \- A wrapper for macopt++, which is a conjugate gradient 
library.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
The package can be installed by the standard \s-1PERL\s0 module installation procedure:
.PP
.Vb 4
\&  perl Makefile.PL
\&  make
\&  make test
\&  make install
.Ve
.PP
Please noted that the original \*(L"macopt++\*(R" \*(C+ source code is included in this 
\&\s-1PERL\s0 package. The static linking avoids the possible conflict to any
pre-installed version of \*(L"macopt++\*(R".
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use strict;
\&  use Math::Macopt;
.Ve
.PP
.Vb 1
\&  &main();
.Ve
.PP
.Vb 5
\&  sub main
\&  {
\&        # Some settings
\&        my $N = 10;
\&        my $epsilon = 0.001;
.Ve
.PP
.Vb 2
\&        # Initialize the Macopt 
\&        my $macopt = new Math::Macopt::Base($N, 0);
.Ve
.PP
.Vb 3
\&        # Setup the function and its gradient
\&        my $func = sub {
\&                my $x = shift;
.Ve
.PP
.Vb 5
\&                my $size = $macopt->size();
\&                my $sum = 0;
\&                foreach my $i (0..$size-1) {
\&                        $sum += ($x->[$i]-$i)**2;
\&                }
.Ve
.PP
.Vb 4
\&                return $sum;
\&        };
\&        my $dfunc = sub {
\&                my $x = shift;
.Ve
.PP
.Vb 5
\&                my $size = $macopt->size();
\&                my $g = ();
\&                foreach my $i (0..$size-1) {
\&                        $g->[$i] = 2*($x->[$i]-$i); 
\&                }
.Ve
.PP
.Vb 4
\&                return $g;
\&        };
\&        $macopt->setFunc(\e&$func);
\&        $macopt->setDfunc(\e&$dfunc);
.Ve
.PP
.Vb 4
\&        # Optimizer using macopt 
\&        my $x = [(1)x($N)];
\&        $macopt->maccheckgrad($x, $N, $epsilon, 0) ;
\&        $macopt->macoptII($x, $N);
.Ve
.PP
.Vb 3
\&        # Display the result
\&        printf "[%s]\en", join(',', @$x);
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Sh "Overview"
.IX Subsection "Overview"
The \f(CW\*(C`Math::Macopt\*(C'\fR provides a \s-1PERL\s0 interface for the \fBmacopt++\fR 
conjugate gradient library, which is developed by David Mackay in \*(C+. 
<http://www.inference.phy.cam.ac.uk/mackay/c/macopt.html>
.PP
The \s-1API\s0 is generated by \s-1SWIG\s0 (<http://www.swig.org>) to interact 
the native C codes of macopt++.
.Sh "Class Hierarchy"
.IX Subsection "Class Hierarchy"
.Vb 2
\&  Math::Macopt
\&  +- Math::Macopt::Base
.Ve
.Sh "Constants"
.IX Subsection "Constants"
nil.
.Sh "Member Variables"
.IX Subsection "Member Variables"
nil.
.Sh "Constructor and initialization"
.IX Subsection "Constructor and initialization"
.ie n .IP """new""" 4
.el .IP "\f(CWnew\fR" 4
.IX Item "new"
Same as the original \*(C+ source code.
.Sp
Arguments:
.RS 4
.IP "*" 4
0: (Integer) n \*(-- The dimension of the vector.
.IP "*" 4
1: (Boolean) verbose \*(-- Whether the verbose messages are displayed.
.IP "*" 4
2: (Double) tolerance \*(-- Optimization convergence.
.IP "*" 4
3: (Boolean) rich \*(-- Whether to do extra gradient evaluation.
.RE
.RS 4
.Sp
Returns:
.IP "*" 4
The blessed object.
.RE
.RS 4
.Sp
Please refer to the original macopt code for details.
.RE
.Sh "Class and Object methods"
.IX Subsection "Class and Object methods"
.ie n .IP """size""" 4
.el .IP "\f(CWsize\fR" 4
.IX Item "size"
Arguments:
.RS 4
.IP "*" 4
nil.
.RE
.RS 4
.Sp
Returns:
.IP "*" 4
(Integer) The number of dimensions.
.RE
.RS 4
.RE
.ie n .IP """macoptII""" 4
.el .IP "\f(CWmacoptII\fR" 4
.IX Item "macoptII"
Optimize (minimize) the vector based on the function and its gradient.
.Sp
Arguments:
.RS 4
.IP "*" 4
0: (\s-1ARRAY\s0) x \*(-- Starting vector.
.IP "*" 4
1: (Integer) N \*(-- The number of dimensions.
.RE
.RS 4
.Sp
Returns:
.IP "*" 4
nil.
.RE
.RS 4
.Sp
Please notice that the optimal results will be put in the
input vector \*(L"x\*(R" after called.
.RE
.ie n .IP """maccheckgrad""" 4
.el .IP "\f(CWmaccheckgrad\fR" 4
.IX Item "maccheckgrad"
Examines objective function and d_objective function to see if 
they agree for a step of size epsilon. 
.Sp
Arguments:
.RS 4
.IP "*" 4
0: (\s-1ARRAY\s0) x \*(-- Starting vector.
.IP "*" 4
1: (Integer) N \*(-- The number of dimensions.
.IP "*" 4
2: (Double) eplison \*(-- Step size. 
.IP "*" 4
3 (Boolean) stopat \*(-- Stop at this component. If 0, do the lot. 
.RE
.RS 4
.Sp
Returns:
.IP "*" 4
nil.
.RE
.RS 4
.RE
.ie n .IP """setFunc""" 4
.el .IP "\f(CWsetFunc\fR" 4
.IX Item "setFunc"
.PD 0
.ie n .IP """setDfunc""" 4
.el .IP "\f(CWsetDfunc\fR" 4
.IX Item "setDfunc"
.PD
Set the function and its gradient function as \s-1PERL\s0 callbacks.
.Sp
Arguments:
.RS 4
.IP "*" 4
0: (SV*) callback \*(-- The \s-1PERL\s0 callback.
.RE
.RS 4
.Sp
Returns:
.IP "*" 4
nil.
.RE
.RS 4
.RE
.SH "OTHER ISSUES"
.IX Header "OTHER ISSUES"
.Sh "Future Plans"
.IX Subsection "Future Plans"
.IP "\(bu" 4
Support on \s-1MS\s0 Windows (e.g., \s-1SFU\s0 or native)
.IP "\(bu" 4
Support on Java language (e.g., use \s-1SWIG\s0 for Java)
.SH "BUGS"
.IX Header "BUGS"
No bug found yet.
.SH "RELATED MODULES"
.IX Header "RELATED MODULES"
nil.
.SH "AUTHOR(S)"
.IX Header "AUTHOR(S)"
Tom Chau <tom@cpan.org>
.SH "CREDIT(S)"
.IX Header "CREDIT(S)"
Cluster Technology Limited <http://www.clustertech.com>

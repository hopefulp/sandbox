#! /usr/bin/env python

import numpy
import sys
import string
import math

name = sys.argv[1]
filename = name+".xyz"
cif_filename = name+".cif"


xyzf = open(filename , "r")
buffer = xyzf.readline()
lbuffer = string.split(buffer)
natoms = string.atoi(lbuffer[0])

la_a = string.atof(lbuffer[1])
la_b = string.atof(lbuffer[2])
la_c = string.atof(lbuffer[3])

la_alpha = string.atof(lbuffer[4])*numpy.pi/180.0
la_beta = string.atof(lbuffer[5])*numpy.pi/180.0
la_gamma = string.atof(lbuffer[6])*numpy.pi/180.0

xyz_data = numpy.zeros([natoms,3], "d")
atoms_list =[]

xyzf.readline()

for i in xrange(natoms):
	buffer = xyzf.readline()
	lbuffer = string.split(buffer)
	atoms_list.append(lbuffer[0].upper())
	data = map(string.atof, lbuffer[1:4])
	for j in xrange(3):
		xyz_data[i,j] = data[j]
		
xyzf.close()


ciff = open(cif_filename, "w")
ciff.write("data_from_tinker_xyz\n")
ciff.write("_symmetry_cell_setting           triclinic \n")
ciff.write("_symmetry_space_group_name_H-M   'P 1' \n")
ciff.write("_symmetry_Int_Tables_number      1 \n")
ciff.write("loop_ \n")
ciff.write("_symmetry_equiv_pos_site_id \n")
ciff.write("_symmetry_equiv_pos_as_xyz \n")
ciff.write("1 x,y,z \n")
ciff.write("_cell_length_a          %12.6f        \n" % (la_a))
ciff.write("_cell_length_b          %12.6f        \n" % (la_b))
ciff.write("_cell_length_c          %12.6f        \n" % (la_c))

ciff.write("_cell_angle_alpha         %12.6f       \n" % (math.degrees(la_alpha)))
ciff.write("_cell_angle_beta         %12.6f        \n" % (math.degrees(la_beta)))
ciff.write("_cell_angle_gamma        %12.6f        \n" % (math.degrees(la_gamma)))

#volume = (la_a*la_b*la_c)

ciff.write("loop_  \n")
ciff.write("_atom_site_label   \n")
ciff.write("_atom_site_type_symbol  \n")
ciff.write("_atom_site_fract_x  \n")
ciff.write("_atom_site_fract_y  \n")
ciff.write("_atom_site_fract_z \n")

#cell_vector = array([la_a, la_b, la_c])
#frac_xyz_dat = (xyz_data / cell_vector)

cell_vector = numpy.zeros([3,3], "d")
frac_xyz = numpy.zeros([natoms,3], "d")


cos_alpha = math.cos(la_alpha)
cos_beta  = math.cos(la_beta)
sin_beta  = math.sin(la_beta)
cos_gamma = math.cos(la_gamma)
sin_gamma = math.sin(la_gamma)
beta_term = (cos_alpha - cos_beta * cos_gamma)/sin_gamma 
gamma_term = math.sqrt(1.0 - cos_beta*cos_beta - beta_term*beta_term) 


for l in xrange(natoms):	
	cell_vector[0,0] = la_a
        cell_vector[0,1] = la_b*cos_gamma
        cell_vector[1,1] = la_b*sin_gamma
        cell_vector[0,2] = la_c*cos_beta
        cell_vector[1,2] = la_c*beta_term
        cell_vector[2,2] = la_c*gamma_term 
	cellvec_inv = numpy.linalg.inv(cell_vector)
	frac_xyz[l,:] = numpy.transpose(numpy.dot(cellvec_inv, numpy.transpose(xyz_data[l,:])))             
   
	#numpy.array2string(numpy.dot(frac_xyz, cell_vector), precision=6, suppress_small= 1)            #neighb_cellvec = numpy.transpose(numpy.dot(cell_vector, \                                            
	      #numpy.transpose(neighb)))                                                                                   

#print  cell_vector


      
for m in xrange(natoms):
	ciff.write(" %s  %s %12.6f  %12.6f  %12.6f \n" % (atoms_list[m],atoms_list[m],frac_xyz[m,0],frac_xyz[m,1],frac_xyz[m,2],))

ciff.write("  \n")
ciff.write("#END  \n")

ciff.close()

















	


		
		

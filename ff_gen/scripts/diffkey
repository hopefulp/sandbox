#!/usr/bin/env python
# -*- coding: utf-8 -*-

# A simple script that checks if the GA fit is too close to boundaries
# TBI: double check if bounds are so close that the fit is too close to each one...
##    maybe a bound_count = 4 could prevent double line
import sys, stow
import string
from pprint import pprint as pprint
from time import sleep

SCRIPT_VERSION = '1.0 aleph test'
SCRIPT_NAME = sys.argv[0].split('/')[-1]
#sys.stderr.write(SCRIPT_NAME+' - version '+SCRIPT_VERSION+'\n')

magicdict = {
    "atom"     : 1,
    "bond"     : 2,
    "opbend"   : 4,
    "angle"    : 3,
    "anglef"   : 3,
    "vdw"      : 1,
    "charge"   : 1,
    "torsion"  : 4,
    "opbend"   : 4
}

if __name__ == "__main__":
    file1, file2 = sys.argv[1:3]


def same_file(filename1, filename2):
    if filename1 == filename2:
        if (filename1 == ''):
            sys.exit('Error: You missed file assignment')
        else:
            sys.exit('Error: Your inputfile is also your outputfile')
    else:
        pass #sys.stderr.write(SCRIPT_NAME+' compares '+filename1+' and '+filename2+'\n')

def get_optarr(fileobj):
    dictopt={}
    for fileline in fileobj:
        try:
            if list(fileline)[0] != '#':
                split = string.split(fileline)
                if split[0] not in magicdict:
                    if split[0] == 'var':
                        split[0] += ' '+split[1]
                        magicdict[split[0]] = magicdict[split[1]]
                        del split[1]
                    else:
                        magicdict[split[0]] = 1
                optarr = dictopt.setdefault(split[0], [])
                optarr.append(split)
        except IndexError: # for blank lines
            pass#;exit('Error: Key is not in magic dict! Something went wrong...'+key) ###ERROR
    return dictopt

def compare_print(one, two):
    if one == two:
        return 'are the same'
    else:
        #pass
        return 'are different'

samemessage = '\033[32mLines are the same\033[0m\n'
revemessage = '\033[36mLines are the same but reversed\033[0m\n'
paramessage = '\033[34mAtoms are reversed, parameters are different\033[0m\n'
atommessage = '\033[35mOnly atoms are the same\033[0m\n'
diffmessage = '\033[31mLines are different\033[0m\n'
def print_message(one, two, mode, line, count):
    begin = " ".join(line[:count+1])+' \033[1m'+str(one)+', '+str(two)+': ' #\033[0m
    if mode == 'same':
        pass#;sys.stderr.write(begin+samemessage)
    if mode == 'reve':
        sys.stderr.write(begin+revemessage)
    if mode == 'atom':
        sys.stderr.write(begin+atommessage)
    if mode == 'diff':
        pass#;sys.stderr.write(begin+diffmessage)
    if mode == 'para':
        sys.stderr.write(begin+paramessage)

### FUNC ###
### TBI?: remove duplication
def compare_optarr(obj1, obj2):
    for key in magicdict: #('var bond',):#magicdict:
        if (key in obj1) and (key in obj2):
            var_count = 1 if 'var' in key else 0 #var addresses to the nth parameter after atoms
            arr1 = obj1[key]; len1 = len(arr1)
            arr2 = obj2[key]; len2 = len(arr2)
            for i in range(len1):
                for j in range(len2):
                    line1 = arr1[i]
                    line2 = arr2[j]
                    if line1 == line2:
                        print_message(i, j, 'same', line1, var_count)
                    else:
                        numatoms = magicdict[key]
                        slicel = 1
                        slicer = slicel+numatoms+var_count
                        slit1 = line1[slicel:slicer]
                        slit2 = line2[slicel:slicer]
                        if slit1 == slit2:
                            print_message(i, j, 'atom', line1, var_count)
                        elif slit1 != slit2:
                            numvar1 = slit1.pop() if var_count else 0
                            numvar2 = slit2.pop() if var_count else 0
                            reve2 = slit2[::-1]
                            if slit1 == reve2 and numvar1 == numvar2:
                                if line1[slicer:] == line2[slicer:]:
                                    print_message(i, j, 'reve', line1, var_count)
                                else:
                                    print_message(i, j, 'para', line1, var_count)
                            else:
                                print_message(i, j, 'diff', line1, var_count)#; print line1; print line2
        else:
            if key not in obj1:
                print key+' \033[1m\033[31mis not\033[0m in '+file1
            if key not in obj2:
                print key+' \033[1m\033[31mis not\033[0m in '+file2

def compare_optarr_test(obj1, obj2):
    return 'test'

### MAIN ###
same_file(file1, file2)
f = open(file1, 'r')
v = open(file2, 'r')

arrf = get_optarr(f)
arrv = get_optarr(v)

print 'Comparing', file1, 'and', file2, '...' 
compare_optarr(arrf, arrv)
print 'Comparing', file1, 'and', file1, '...'
compare_optarr(arrf, arrf)
print 'Comparing', file2, 'and', file2, '...'
compare_optarr(arrv, arrv)

#!/usr/bin/env python
# -*- coding: utf-8 -*-
###########################################
#
#         CONVERT_KEY
#
#   script to convert old pydlpoly/tinker
#   key files to the new standard input
#
#    written by JPD (2014)
#
###########################################


import string
import sys
import getopt
import molsys
from mofplus import FF_api

api = FF_api()

key_old = sys.argv[1]
ref     = sys.argv[2]
ffname  = sys.argv[3]

f_old = open(key_old, 'r')

obsolete_keys = ['forcefield', 'bond-cubic', 'bond-quartic', 'angle-cubic',\
    'angle-quartic', 'angle-pentic', 'angle-sextic', 'angangunit', 'strtorunit',\
    'vdw-14-scale', 'chg-14-scale', 'chg-13-scale', 'chg-12-scale', 'dielectric',\
    'opbendpot', 'maxiter', "variables"]

key_mapper = {
        "bond": "bnd",
        "bond5": "bnd",
        "bond4": "bnd",
        "angle": "ang",
        "strbnd": "ang",
        "angle4": "ang",
        "angle5": "ang",
        "anglef": "ang",
        "torsion": "dih",
        "torsion4": "dih",
        "torsion5": "dih",
        "vdw": "vdw",
        "opbend": "oop",
        "charge": "charge",
        }

pot_mapper = {
        "oop": "harm",
        "bnd": "mm3",
        "ang": "mm3",
        "dih": "cos3",
        "vdw": "buck6d",
        "charge": "gaussian"}

leng_mapper = {
        "bnd": 2,
        "ang": 3,
        "dih": 4,
        "oop": 4,
        "vdw": 1,
        "charge": 1,
        }

trd = {5 : "h1_c1@ph",
        2: "c3_c2h1@ph",
        22: "c3_c3@ph",
        222: "c3@ph",
        1: "c4_c1h2n1@dab",
        7: "h1_c1@dab",
        8: "n4@dab",
        166: "zn6_n1o4zn1@zn2p",
        167: "o2_c1zn1@co2",
        168: "c3_c1o2@co2",
        }


#sdic = raw_input("Give atype mapping:\n")
#trd  = eval(sdic)

for line in f_old:
    sline = string.split(line)
    if len(sline) == 0 or line[0] == "#":
        pass
    elif sline[0].lower() in key_mapper.keys():
        print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        print "--------oldstyle----------"
        print line
        ### translate key
        keyword = sline[0].lower()
        ptype = key_mapper[keyword]
        pot  = pot_mapper[ptype]
        if keyword == "anglef":
            pot = "fourier"
        if keyword == "strbnd":
            pot = "strbnd"
        ### translate atypes
        na      = leng_mapper[ptype]
        atypes  = map(string.atoi,sline[1:1+na])
        natypes = string.join([trd[i] for i in atypes],":")
        #natypes = string.join(atypes,":")
        ### care for params
        params  = map(string.atof,sline[1+na:])
        if ((ptype == "dih") and (len(params) == 4)): pot = "cos4"
        if ((ptype == "bnd") and (len(params) == 3)): pot = "morse"
        if ((ptype == "oop") and (len(params) == 1)): params.append(0.0)
        stop = False
        while not stop:
            print "--------translation-------"
            print "FF      : %s" % ffname
            print "atypes  : %s" % natypes
            print "type    : %s" % ptype
            print "pot     : %s" % pot
            print "ref     : %s" % ref
            print "params  : ",params
            print "--------options---------"
            print "[s]: skip"
            print "[y]: write to db"
            print "[a]: modify atypes"
            print "[t]: modify type"
            print "[p]: modify pot"
            print "[r]: modify ref"
            x = raw_input("Your choice:  ")
            if x == "s":
                stop = True
                print "Entry will be skipped"
            elif x == "y":
                ret = api.set_params(ffname, natypes, ptype, pot, ref, params)
                print ret
                if type(ret) != int:
                    "Error occurred during upload, try again!"
                else:
                    print "Entry is written to db"
                    stop = True
            elif x == "a":
                inp = raw_input("Give modified atypes:  ")
                ints = map(string.atoi, string.split(inp))
                natypes = string.join([trd[i] for i in ints],":")
            elif x == "t":
                ptype = raw_input("Give modified type:  ")
            elif x == "p":
                pot = raw_input("Give modified pot:  ")
            elif x == "r":
                ref = raw_input("Give modified ref:  ")
f_old.close()

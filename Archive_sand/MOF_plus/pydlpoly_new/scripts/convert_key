#!/usr/bin/env python
# -*- coding: utf-8 -*-
###########################################
#
#         CONVERT_KEY
#
#   script to convert old pydlpoly/tinker
#   key files to the new standard input
#
#    written by JPD (2014)
#
###########################################


import string
import sys
import getopt 

key_old = ''
key_new = ''

parfile = False
variables = {}

argv = sys.argv[1:]

# defaults
fieldwidth = 12

def print_help():
    print 'Usage: convert_key -i <inputfile> -o <outputfile> [-f <filedwidth>] [-p] [-qb] [-qa]'
    print '       Optional Arguments:'
    print '       -f : determines the width of the parameter fields in the new key file (default = %d)' % fieldwidth
    print '       -p : infile is an old par file ... var statements will be inserted'
#    print '       -q: converts MM3 bond terms to usual quartic terms'
    
def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False
    
try:
    opts, args = getopt.getopt(argv, "hpfi:o:")
except getopt.GetoptError:
    print "Unknown option %s requested" % opt
    print_help()
    sys.exit(2)
for opt, arg in opts:
    if opt == '-h':
        print_help()
        sys.exit()
    elif opt == "-i":
        key_old = arg
    elif opt == "-o":
        key_new = arg
    elif opt == '-f':
        fieldwidth = int(arg)
        assert fieldwidth>9, fieldwidth<20
    elif opt == '-p':
        parfile = True
#    elif opt == '-q':
#        q_bond = True
    else:
        print_help()
        sys.exit(1)

if key_old == key_new:
    if key_old == '':
        print_help()
        sys.exit(1)
    else:
        sys.exit('Error: Your inputfile is also your outputputfile')
    
print 'Old keyfile %s will be converted in new keyfile %s' % (key_old, key_new)
print ' '
print 'REMARKS:'
print ' - duplicate opbend terms need to be removed by hand' 

if parfile:
    print '\n We read an old style par file and convert it to the new format '
    print ' First the variables are read in', key_old
    stop = False
    f_par = open(key_old, "r")
    while not stop:
        line = f_par.readline()
        sline = string.split(line)
        if len(sline) > 0:
            if sline[0] == "variables":
                while not stop:
                    sline = string.split(f_par.readline())
                    if sline[0] == "end":
                        stop = True
                    elif sline[0][0] != "#":
                        variables[sline[0].lower()] = sline[1:]
                    else :
                        pass
    f_par.close()
                

f_old = open(key_old, 'r')
f_new = open(key_new, 'w')


obsolete_keys = ['forcefield', 'bond-cubic', 'bond-quartic', 'angle-cubic',\
    'angle-quartic', 'angle-pentic', 'angle-sextic', 'angangunit', 'strtorunit',\
    'vdw-14-scale', 'chg-14-scale', 'chg-13-scale', 'chg-12-scale', 'dielectric',\
    'opbendpot', 'maxiter', "variables"]

formatted_keys = {
    "bond"     : 2,
    "bond4"    : 2,
    "bond5"    : 2,
    "opbend"   : 4,
    "anglef"   : 3,
    "vdw"      : 1,
    "charge"   : 1,
    "chargemod": 2,
    "strbnd"   : 3,
    }

changed_keys = {
    "atom"     :  (1, (0,)),
    "torsion"  :  (4, (0,3,6,9)),
    "torsion4" :  (4, (0,3,6,9)),
    "torsion5" :  (4, (0,3,6,9)),
    "angle"    :  (3, (0, 1)),
    "angle5"    :  (3, (0, 1)),    
    "angle4"    :  (3, (0, 1)),    
    }

f_new.write("%-15s%-5.1f\n" % ('version',2.0))

stop = False
line = f_old.readline()
sline = string.split(line)
if sline[0] == "version" and sline[1] == "2.0":
    print "Already a Version 2.0 key-file"
    sys.exit(2)
while not stop:
    if len(sline) == 0 or line[0] == "#":
        # this is a whiteline or a comment .. just print it
        f_new.write(line)
    elif sline[0].lower() in formatted_keys.keys():
        keyword = sline[0].lower()
        na = formatted_keys[keyword]
        atypes  = sline[1:1+na]
        params_raw  = sline[1+na:]
        params      = []
        form = "%-15s" + na*"%-10s"
        varlines = []
        for i,p in enumerate(params_raw):
            if p[0] == "!": break
            if p.isdigit():
                form += "%%%dd" % fieldwidth
                params.append(int(p))
            elif is_number(p):
                params.append(float(p))
                form += "%%%d.%df" % (fieldwidth, fieldwidth/3)
            else:
                if p.lower() in variables.keys():
                    v = variables[p.lower()]
                    params.append(float(v[2]))
                    varform = "var %-11s" + na*"%-10s" + "                %5d %10.5f %10.5f %5d\n"
                    varlines.append(varform % tuple([keyword]+atypes+[i+1, float(v[0]), float(v[1]), int(v[4])]))
                else:
                    params.append(p)                
                form += "%%-%ds" % fieldwidth
        form += "\n"
        f_new.write(form % tuple([keyword]+atypes+params))
        if len(varlines) > 0:
            for l in varlines: f_new.write(l)
            f_new.write("\n")
    elif sline[0].lower() in changed_keys.keys():
        keyword = sline[0].lower()
        na, par_mask = changed_keys[keyword]
        atypes  = sline[1:1+na]
        params = []
        form = "%-15s" + na*"%-10s"
        varlines = []
        for i in par_mask:
            if 1+na+i >= len(sline): break
            p = sline[1+na+i]
            if p[0] == "!": break
            if p.isdigit():
                form += "%%%dd" % fieldwidth
                params.append(int(p))
            elif is_number(p):
                params.append(float(p))
                form += "%%%d.%df" % (fieldwidth, fieldwidth/3)
            else:
                if p.lower() in variables.keys():
                    v = variables[p.lower()]
                    params.append(float(v[2]))
                    varform = "var %-11s" + na*"%-10s" + "                %5d %10.5f %10.5f %5d\n"
                    varlines.append(varform % tuple([keyword]+atypes+[i+1, float(v[0]), float(v[1]), int(v[4])]))
                else:
                    params.append(p)                
                form += "%%-%ds" % fieldwidth
        form += "\n"
        f_new.write(form % tuple([keyword]+atypes+params))
        if len(varlines) > 0:
            for l in varlines: f_new.write(l)
            f_new.write("\n")
    elif ((sline[0].lower() == 'bondq') and (len(sline)) == 5):
        k = string.atof(sline[3])
        k2 = -3.825*k
        k3 = 7.58625*k
        f_new.write("bondq  %s  %s  %10.5f  %s  %10.5f  %10.5f\n" % 
                (sline[1], sline[2], k, sline[4], k2, k3))
    elif ((sline[0].lower() == 'angleq') and (len(sline)) == 6):
        k = string.atof(sline[4])
        k2 = -0.21*k
        k3 = (1.12*10**-4)*k
        f_new.write("angleq  %s  %s %s  %10.5f  %s  %10.5f  %10.7f\n" % 
                (sline[1], sline[2], sline[3], k, sline[5], k2, k3))
    elif sline[0].lower() not in obsolete_keys:
        f_new.write("%-15s%s\n" % (sline[0], string.join(sline[1:])))
    elif sline[0] == "variables":
        if parfile == True:
            stop=True
    else:
        pass
    line = f_old.readline()
    if len(line) == 0:
        stop = True
    else:
        sline = string.split(line)
    

f_old.close()
f_new.close()
